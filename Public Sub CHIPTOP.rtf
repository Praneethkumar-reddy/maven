{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31506\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\f43\fbidi \fswiss\fcharset0\fprq2 Aptos;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2 Aptos Display;}{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2 Aptos;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f45\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f46\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f48\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f49\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f50\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f51\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f52\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f53\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f415\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f416\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\f418\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f419\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f420\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\f421\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}
{\f422\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f423\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\f475\fbidi \fswiss\fcharset238\fprq2 Aptos CE;}{\f476\fbidi \fswiss\fcharset204\fprq2 Aptos Cyr;}
{\f478\fbidi \fswiss\fcharset161\fprq2 Aptos Greek;}{\f479\fbidi \fswiss\fcharset162\fprq2 Aptos Tur;}{\f482\fbidi \fswiss\fcharset186\fprq2 Aptos Baltic;}{\f483\fbidi \fswiss\fcharset163\fprq2 Aptos (Vietnamese);}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Aptos Display CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Aptos Display Cyr;}
{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Aptos Display Greek;}{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Aptos Display Tur;}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Aptos Display Baltic;}
{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Aptos Display (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Aptos CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Aptos Cyr;}
{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Aptos Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Aptos Tur;}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Aptos Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Aptos (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green0\blue0;\red0\green0\blue0;\caccentone\ctint255\cshade191\red15\green71\blue97;
\ctextone\ctint166\cshade255\red89\green89\blue89;\ctextone\ctint216\cshade255\red39\green39\blue39;\ctextone\ctint191\cshade255\red64\green64\blue64;\chyperlink\ctint255\cshade255\red70\green120\blue134;}{\*\defchp \f31506\fs24\kerning2 }{\*\defpap 
\ql \li0\ri0\sa160\sl278\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa160\sl278\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af31507\afs24\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 \styrsid12845185 Normal;}{\s1\ql \li0\ri0\sb360\sa80\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31503\afs40\alang1025 \ltrch\fcs0 
\fs40\cf19\lang1033\langfe1033\kerning2\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink15 \sqformat \spriority9 \styrsid12845185 heading 1;}{\s2\ql \li0\ri0\sb160\sa80\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31503\afs32\alang1025 \ltrch\fcs0 
\fs32\cf19\lang1033\langfe1033\kerning2\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink16 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 2;}{\s3\ql \li0\ri0\sb160\sa80\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31503\afs28\alang1025 \ltrch\fcs0 
\fs28\cf19\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink17 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 3;}{\s4\ql \li0\ri0\sb80\sa40\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ai\af31503\afs24\alang1025 \ltrch\fcs0 
\i\fs24\cf19\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink18 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 4;}{\s5\ql \li0\ri0\sb80\sa40\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31503\afs24\alang1025 \ltrch\fcs0 
\fs24\cf19\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink19 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 5;}{\s6\ql \li0\ri0\sb40\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel5\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ai\af31503\afs24\alang1025 \ltrch\fcs0 
\i\fs24\cf20\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink20 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 6;}{\s7\ql \li0\ri0\sb40\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel6\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31503\afs24\alang1025 \ltrch\fcs0 
\fs24\cf20\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink21 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 7;}{\s8\ql \li0\ri0\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel7\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ai\af31503\afs24\alang1025 \ltrch\fcs0 
\i\fs24\cf21\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink22 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 8;}{\s9\ql \li0\ri0\sl278\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel8\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31503\afs24\alang1025 \ltrch\fcs0 
\fs24\cf21\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink23 \ssemihidden \sunhideused \sqformat \spriority9 \styrsid12845185 heading 9;}{\*\cs10 \additive 
\ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa160\sl278\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs24\alang1025 \ltrch\fcs0 \f31506\fs24\lang1033\langfe1033\kerning2\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused Normal Table;}{\*\cs15 
\additive \rtlch\fcs1 \af31503\afs40 \ltrch\fcs0 \fs40\cf19\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink1 \slocked \spriority9 \styrsid12845185 Heading 1 Char;}{\*\cs16 \additive \rtlch\fcs1 \af31503\afs32 \ltrch\fcs0 
\fs32\cf19\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink2 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 2 Char;}{\*\cs17 \additive \rtlch\fcs1 \af31503\afs28 \ltrch\fcs0 \fs28\cf19\dbch\af31501 
\sbasedon10 \slink3 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 3 Char;}{\*\cs18 \additive \rtlch\fcs1 \ai\af31503 \ltrch\fcs0 \i\cf19\dbch\af31501 \sbasedon10 \slink4 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 4 Char;}{\*
\cs19 \additive \rtlch\fcs1 \af31503 \ltrch\fcs0 \cf19\dbch\af31501 \sbasedon10 \slink5 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 5 Char;}{\*\cs20 \additive \rtlch\fcs1 \ai\af31503 \ltrch\fcs0 \i\cf20\dbch\af31501 
\sbasedon10 \slink6 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 6 Char;}{\*\cs21 \additive \rtlch\fcs1 \af31503 \ltrch\fcs0 \cf20\dbch\af31501 \sbasedon10 \slink7 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 7 Char;}{\*\cs22 
\additive \rtlch\fcs1 \ai\af31503 \ltrch\fcs0 \i\cf21\dbch\af31501 \sbasedon10 \slink8 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 8 Char;}{\*\cs23 \additive \rtlch\fcs1 \af31503 \ltrch\fcs0 \cf21\dbch\af31501 
\sbasedon10 \slink9 \slocked \ssemihidden \spriority9 \styrsid12845185 Heading 9 Char;}{\s24\ql \li0\ri0\sa80\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\contextualspace \rtlch\fcs1 \af31503\afs56\alang1025 \ltrch\fcs0 
\fs56\expnd-2\expndtw-10\lang1033\langfe1033\kerning28\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink25 \sqformat \spriority10 \styrsid12845185 Title;}{\*\cs25 \additive \rtlch\fcs1 \af31503\afs56 
\ltrch\fcs0 \fs56\expnd-2\expndtw-10\kerning28\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink24 \slocked \spriority10 \styrsid12845185 Title Char;}{\s26\ql \li0\ri0\sa160\sl278\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ilvl1\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31503\afs28\alang1025 \ltrch\fcs0 \fs28\expnd3\expndtw15\cf20\lang1033\langfe1033\kerning2\loch\f31506\hich\af31506\dbch\af31501\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 \slink27 \sqformat \spriority11 \styrsid12845185 Subtitle;}{\*\cs27 \additive \rtlch\fcs1 \af31503\afs28 \ltrch\fcs0 \fs28\expnd3\expndtw15\cf20\dbch\af31501 \sbasedon10 \slink26 \slocked \spriority11 \styrsid12845185 Subtitle Char;}{
\s28\qc \li0\ri0\sb160\sa160\sl278\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ai\af31507\afs24\alang1025 \ltrch\fcs0 \i\f31506\fs24\cf22\lang1033\langfe1033\kerning2\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 \slink29 \sqformat \spriority29 \styrsid12845185 Quote;}{\*\cs29 \additive \rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\cf22 \sbasedon10 \slink28 \slocked \spriority29 \styrsid12845185 Quote Char;}{\s30\ql \li720\ri0\sa160\sl278\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0\contextualspace \rtlch\fcs1 \af31507\afs24\alang1025 \ltrch\fcs0 \f31506\fs24\lang1033\langfe1033\kerning2\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext30 \sqformat \spriority34 \styrsid12845185 List Paragraph;}{\*\cs31 \additive \rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\cf19 \sbasedon10 \sqformat \spriority21 \styrsid12845185 Intense Emphasis;}{\s32\qc \li864\ri864\sb360\sa360\sl278\slmult1
\widctlpar\brdrt\brdrs\brdrw10\brsp200\brdrcf19 \brdrb\brdrs\brdrw10\brsp200\brdrcf19 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin864\lin864\itap0 \rtlch\fcs1 \ai\af31507\afs24\alang1025 \ltrch\fcs0 
\i\f31506\fs24\cf19\lang1033\langfe1033\kerning2\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink33 \sqformat \spriority30 \styrsid12845185 Intense Quote;}{\*\cs33 \additive \rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\cf19 
\sbasedon10 \slink32 \slocked \spriority30 \styrsid12845185 Intense Quote Char;}{\*\cs34 \additive \rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\scaps\expnd1\expndtw5\cf19 \sbasedon10 \sqformat \spriority32 \styrsid12845185 Intense Reference;}{\*\cs35 \additive 
\rtlch\fcs1 \af0 \ltrch\fcs0 \ul\cf23 \sbasedon10 \ssemihidden \sunhideused \styrsid12845185 Hyperlink;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid2973776\rsid4148551\rsid10448442\rsid12845185}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0
\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Praneethkumar  Pamireddy}{\operator app}{\creatim\yr2025\mo4\dy17\hr4\min30}{\revtim\yr2025\mo4\dy17\hr4\min30}{\version2}{\edmins0}{\nofpages2}{\nofwords12517}{\nofchars71353}
{\*\company Tech Mahindra Ltd.}{\nofcharsws83703}{\vern31}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot12845185\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}
{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar
\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12845185 \rtlch\fcs1 \af31507\afs24\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe1033\kerning2\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af37\afs16 
\ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 Public Sub CHIPTOP_SHMEM_STATUS()
\par \hich\af37\dbch\af31505\loch\f37     On Error GoTo ErrorHandler
\par \hich\af37\dbch\af31505\loch\f37     ' Base output path
\par \hich\af37\dbch\af31505\loch\f37     Dim basePath As String
\par \hich\af37\dbch\af31505\loch\f37     basePath = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\
Docs\\\\Eagle_A0\\\\TestPlan\\\\TP_COVERAGE_SHEETS\\\\" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\
Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\TP_COVERAGE_SHEETS\\}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 "
\par \hich\af37\dbch\af31505\loch\f37     ' Define shee\hich\af37\dbch\af31505\loch\f37 t filters
\par \hich\af37\dbch\af31505\loch\f37     Dim excludedSheets As Variant, includedSheets As Variant, matchedSheets As Collection
\par \hich\af37\dbch\af31505\loch\f37     excludedSheets = Array("TP_COVERAGE_UPF", "TP_COVERAGE_SHMEM_SDF", "TP_COVERAGE_CT_SDF", "TP_COVERAGE_CT_TYP_MAX", "TP_COVERAGE_CT_TYP_MIN", _
\par \hich\af37\dbch\af31505\loch\f37         "\hich\af37\dbch\af31505\loch\f37 TP_COVERAGE_SHMEM_TYP_MAX", "TP_COVERAGE_SHMEM_TYP_MIN", "TP_COVERAGE_CT_TYP_MAX_MAX", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_CT_TYP_MIN_MIN", "TP_COVERAGE_SHMEM_TYP_MAX_MAX", "TP_COVERAGE_SHMEM_TYP_MIN_MIN", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_PG0_DELAY", "TP_COVERAGE_SH_MEM_UPF", "T\hich\af37\dbch\af31505\loch\f37 P_COVERAGE_SH_MEM_PG0_DELAY", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_SHMEM_SDF_TYP_MIN", "TP_COVERAGE_SHMEM_SDF_TYP_MAX", "TP_COVERAGE_CT_SDF_TYP_MIN", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_CT_SDF_TYP_MAX", "TP_COVERAGE_GLS_SDF", "GLS_SDF_SANITY_HP", "CHIP_TOP", "MBIST", _
\par \hich\af37\dbch\af31505\loch\f37         "PINM\hich\af37\dbch\af31505\loch\f37 UX", "apb_i2c", "OSPI_SS", "JPEG_SS", "MRAM_SS", "ZAPHOD_SS", "ISP_SS", "SHARED_MEM_SS", _
\par \hich\af37\dbch\af31505\loch\f37         "MRAM_RC_SS", "CVM_OCVM_SS", "CPI_ISP_SS", "MRAM_SS_OLD", "OSPI_SS_plan", "JPEG_SS_OLD", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_SHMEM_PG0_DELAY", "10Jan_TP_COVERAGE_SDF_SANI\hich\af37\dbch\af31505\loch\f37 TY_HP", "TP_COVERAGE_SDF_SANITY_HP", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_SHMEM_UPF", "TP_COVERAGE_SHMEM_SDF")
\par \hich\af37\dbch\af31505\loch\f37     ' Get sheets ending with _SS
\par \hich\af37\dbch\af31505\loch\f37     Set matchedSheets = New Collection
\par \hich\af37\dbch\af31505\loch\f37     Dim ws As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     For Each ws In ThisWorkbook.Sheets
\par \hich\af37\dbch\af31505\loch\f37         If Right(ws.Name\hich\af37\dbch\af31505\loch\f37 , 3) = "_SS" Then
\par \hich\af37\dbch\af31505\loch\f37             matchedSheets.Add ws.Name
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next ws
\par \hich\af37\dbch\af31505\loch\f37     ReDim includedSheets(1 To matchedSheets.Count)
\par \hich\af37\dbch\af31505\loch\f37     Dim i As Long
\par \hich\af37\dbch\af31505\loch\f37     For i = 1 To matchedSheets.Count
\par \hich\af37\dbch\af31505\loch\f37         includedSheets(i) = matchedSheets(i)
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     ' Create and setup workbooks
\par \hich\af37\dbch\af31505\loch\f37     Dim upfWB As Workbook, pg0WB As Workbook, shMemUpfWB As Workbook, shMemPg0WB As Workbook
\par \hich\af37\dbch\af31505\loch\f37     Set upfWB = Workbooks.Add
\par \hich\af37\dbch\af31505\loch\f37     Set pg0WB = Workbooks.Add
\par \hich\af37\dbch\af31505\loch\f37     Set shMemU\hich\af37\dbch\af31505\loch\f37 pfWB = Workbooks.Add
\par \hich\af37\dbch\af31505\loch\f37     Set shMemPg0WB = Workbooks.Add
\par \hich\af37\dbch\af31505\loch\f37     ' Setup headers for all workbooks
\par \hich\af37\dbch\af31505\loch\f37     With upfWB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 1).Value = "A"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 2).Value = ""
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 10).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 6).Value = "SV Test Name"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 7).Value = "C Test Name"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 8).Value = "Test ID"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 3).Value = "Current Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 4).Value = "Previous Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 5).Value = "CPU"
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37   End With
\par \hich\af37\dbch\af31505\loch\f37     With pg0WB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 1).Value = "A"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 2).Value = ""
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 9).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 5).Value = "SV Test Name"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 6).Value = "C Test Name"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 7).Value = "Test ID"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 3).Value = "Current Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 4).Value = "CPU"
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37     With shMemUpfWB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 1).Value = "A"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 2).Value = ""
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 9).Value =\hich\af37\dbch\af31505\loch\f37  "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 6).Value = "SV Test Name"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 7).Value = "Test ID"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 3).Value = "Current Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 4).Value = "Previous Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 5).Value = "CPU"
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37     With shMemPg0WB.She\hich\af37\dbch\af31505\loch\f37 ets(1)
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 1).Value = "A"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 2).Value = ""
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 8).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 5).Value = "SV Test Name"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 6).Value = "Test ID"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 3).Value = "Current Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, \hich\af37\dbch\af31505\loch\f37 4).Value = "CPU"
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37     ' Initialize row counters
\par \hich\af37\dbch\af31505\loch\f37     Dim upfRow As Long, pg0Row As Long, shMemUpfRow As Long, shMemPg0Row As Long
\par \hich\af37\dbch\af31505\loch\f37     upfRow = 2
\par \hich\af37\dbch\af31505\loch\f37     pg0Row = 2
\par \hich\af37\dbch\af31505\loch\f37     shMemUpfRow = 2
\par \hich\af37\dbch\af31505\loch\f37     shMemPg0Row = 2
\par \hich\af37\dbch\af31505\loch\f37     ' Process each worksheet
\par \hich\af37\dbch\af31505\loch\f37     For Each ws In ThisWorkbook.Worksheets
\par \hich\af37\dbch\af31505\loch\f37         ' Check if sheet should be processed
\par \hich\af37\dbch\af31505\loch\f37         Dim isSharedMemSheet As Boolean, isValidSheet As Boolean, k As Long
\par \hich\af37\dbch\af31505\loch\f37         ' Check if sheet is in includedSheets
\par \hich\af37\dbch\af31505\loch\f37         isSharedM\hich\af37\dbch\af31505\loch\f37 emSheet = False
\par \hich\af37\dbch\af31505\loch\f37         For k = LBound(includedSheets) To UBound(includedSheets)
\par \hich\af37\dbch\af31505\loch\f37             If ws.Name = CStr(includedSheets(k)) Then
\par \hich\af37\dbch\af31505\loch\f37                 isSharedMemSheet = True
\par \hich\af37\dbch\af31505\loch\f37                 Exit For
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next k
\par \hich\af37\dbch\af31505\loch\f37         ' Check if she\hich\af37\dbch\af31505\loch\f37 et is not in excludedSheets
\par \hich\af37\dbch\af31505\loch\f37         isValidSheet = True
\par \hich\af37\dbch\af31505\loch\f37         For k = LBound(excludedSheets) To UBound(excludedSheets)
\par \hich\af37\dbch\af31505\loch\f37             If ws.Name = CStr(excludedSheets(k)) Then
\par \hich\af37\dbch\af31505\loch\f37                 isValidSheet = False
\par \hich\af37\dbch\af31505\loch\f37                 Exit For
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next k
\par \hich\af37\dbch\af31505\loch\f37         ' Find header row and Test ID column
\par \hich\af37\dbch\af31505\loch\f37         Dim headerRow As Long, testIDCol As Long, j As Long, lastRow As Long
\par \hich\af37\dbch\af31505\loch\f37         headerRow = 0
\par \hich\af37\dbch\af31505\loch\f37         testIDCol = 0
\par \hich\af37\dbch\af31505\loch\f37         lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         For i = 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37             For j = 1 To ws.Cells(i, ws.Columns.Count).End(xlToLeft).Column
\par \hich\af37\dbch\af31505\loch\f37                 If Trim(CStr(ws.Cells(i, j).Value)) = "Test ID" Then
\par \hich\af37\dbch\af31505\loch\f37                     headerRow = i
\par \hich\af37\dbch\af31505\loch\f37                     testIDCol = j
\par \hich\af37\dbch\af31505\loch\f37               \hich\af37\dbch\af31505\loch\f37       Exit For
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next j
\par \hich\af37\dbch\af31505\loch\f37             If headerRow > 0 Then Exit For
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37         If headerRow > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             ' Find column indices
\par \hich\af37\dbch\af31505\loch\f37             Dim ownerCol As Long, svTestCol As Long, cTestCol As Long
\par \hich\af37\dbch\af31505\loch\f37        \hich\af37\dbch\af31505\loch\f37      Dim currentUPFCol As Long, cpuCol As Long
\par \hich\af37\dbch\af31505\loch\f37             ownerCol = 0: svTestCol = 0: cTestCol = 0
\par \hich\af37\dbch\af31505\loch\f37             currentUPFCol = 0: cpuCol = 0
\par \hich\af37\dbch\af31505\loch\f37             For j = 1 To ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
\par \hich\af37\dbch\af31505\loch\f37                 Select Case T\hich\af37\dbch\af31505\loch\f37 rim(CStr(ws.Cells(headerRow, j).Value))
\par \hich\af37\dbch\af31505\loch\f37                     Case "Owner": ownerCol = j
\par \hich\af37\dbch\af31505\loch\f37                     Case "SV Test Name": svTestCol = j
\par \hich\af37\dbch\af31505\loch\f37                     Case "C Test Name": cTestCol = j
\par \hich\af37\dbch\af31505\loch\f37                     Case "Current UPF": currentUPFCol = j
\par \hich\af37\dbch\af31505\loch\f37                     Case "CPU": cpuCol = j
\par \hich\af37\dbch\af31505\loch\f37                 End Select
\par \hich\af37\dbch\af31505\loch\f37             Next j
\par \hich\af37\dbch\af31505\loch\f37             ' Copy data
\par \hich\af37\dbch\af31505\loch\f37             For i = headerRow + 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37                 If Not IsEmpty(ws.Cells(i, testIDCol)) Then
\par \hich\af37\dbch\af31505\loch\f37                     If isSharedMemSheet Then
\par \hich\af37\dbch\af31505\loch\f37                         ' Copy to Shared Memory workbooks
\par \hich\af37\dbch\af31505\loch\f37                         With shMemUpfWB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37                             If ownerCol > 0\hich\af37\dbch\af31505\loch\f37  Then .Cells(shMemUpfRow, 9).Value = CStr(ws.Cells(i, ownerCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If svTestCol > 0 Then .Cells(shMemUpfRow, 6).Value = CStr(ws.Cells(i, svTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             .Cells(shMemUpfRow, 7).Value = CStr(ws.Ce\hich\af37\dbch\af31505\loch\f37 lls(i, testIDCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If currentUPFCol > 0 Then .Cells(shMemUpfRow, 4).Value = CStr(ws.Cells(i, currentUPFCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If cpuCol > 0 Then .Cells(shMemUpfRow, 5).Value = CStr(ws.Cells(i, cpuCol).Valu\hich\af37\dbch\af31505\loch\f37 e)
\par \hich\af37\dbch\af31505\loch\f37                         End With
\par \hich\af37\dbch\af31505\loch\f37                         
\par \hich\af37\dbch\af31505\loch\f37                         With shMemPg0WB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37                             If ownerCol > 0 Then .Cells(shMemPg0Row, 8).Value = CStr(ws.Cells(i, ownerCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If \hich\af37\dbch\af31505\loch\f37 svTestCol > 0 Then .Cells(shMemPg0Row, 5).Value = CStr(ws.Cells(i, svTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             .Cells(shMemPg0Row, 6).Value = CStr(ws.Cells(i, testIDCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If cpuCol > 0 Then .Cells(shMemPg0Row, 4).Value =\hich\af37\dbch\af31505\loch\f37  CStr(ws.Cells(i, cpuCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                         End With
\par \hich\af37\dbch\af31505\loch\f37                         
\par \hich\af37\dbch\af31505\loch\f37                         shMemUpfRow = shMemUpfRow + 1
\par \hich\af37\dbch\af31505\loch\f37                         shMemPg0Row = shMemPg0Row + 1
\par \hich\af37\dbch\af31505\loch\f37                         
\par \hich\af37\dbch\af31505\loch\f37                     ElseIf isVal\hich\af37\dbch\af31505\loch\f37 idSheet Then
\par \hich\af37\dbch\af31505\loch\f37                         ' Copy to main workbooks
\par \hich\af37\dbch\af31505\loch\f37                         With upfWB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37                             If ownerCol > 0 Then .Cells(upfRow, 10).Value = CStr(ws.Cells(i, ownerCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If svTestCo\hich\af37\dbch\af31505\loch\f37 l > 0 Then .Cells(upfRow, 6).Value = CStr(ws.Cells(i, svTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If cTestCol > 0 Then .Cells(upfRow, 7).Value = CStr(ws.Cells(i, cTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             .Cells(upfRow, 8).Value = CStr(ws.Cells(i, testIDCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If currentUPFCol > 0 Then .Cells(upfRow, 4).Value = CStr(ws.Cells(i, currentUPFCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If cpuCol > 0 Then .\hich\af37\dbch\af31505\loch\f37 Cells(upfRow, 5).Value = CStr(ws.Cells(i, cpuCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                         End With
\par \hich\af37\dbch\af31505\loch\f37                         
\par \hich\af37\dbch\af31505\loch\f37                         With pg0WB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37                             If ownerCol > 0 Then .Cells(pg0Row, 9).Value = CStr(ws.Cells(i, owne\hich\af37\dbch\af31505\loch\f37 rCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If svTestCol > 0 Then .Cells(pg0Row, 5).Value = CStr(ws.Cells(i, svTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If cTestCol > 0 Then .Cells(pg0Row, 6).Value = CStr(ws.Cells(i, cTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             .Cells(pg0Row, 7).Value = CStr(ws.Cells(i, testIDCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                             If cpuCol > 0 Then .Cells(pg0R\hich\af37\dbch\af31505\loch\f37 ow, 4).Value = CStr(ws.Cells(i, cpuCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                         End With
\par \hich\af37\dbch\af31505\loch\f37                         
\par \hich\af37\dbch\af31505\loch\f37                         upfRow = upfRow + 1
\par \hich\af37\dbch\af31505\loch\f37                         pg0Row = pg0Row + 1
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             N\hich\af37\dbch\af31505\loch\f37 ext i
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next ws
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     ' Process SDF files
\par \hich\af37\dbch\af31505\loch\f37     Dim exportConfigs As Variant
\par \hich\af37\dbch\af31505\loch\f37     exportConfigs = Array( _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_CT_TYP_MAX.csv", excludedSheets, True, 9, 7, False, 10, 4), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_CT_TYP_MIN.csv",\hich\af37\dbch\af31505\loch\f37  excludedSheets, True, 9, 7, False, 12, 6), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_CT_TYP_MAX_MAX.csv", excludedSheets, True, 9, 7, False, 14, 8), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_CT_TYP_MIN_MIN.csv", excludedSheets, True, 9, 7, False, 16, 10), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_SHMEM_TYP_MAX.csv", includedSheets, False, 8, 6, True, 9, 4), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_SHMEM_TYP_MIN.csv", includedSheets, False, 8\hich\af37\dbch\af31505\loch\f37 , 6, True, 11, 6), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_SHMEM_TYP_MAX_MAX.csv", includedSheets, False, 8, 6, True, 13, 8), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TP_COVERAGE_SHMEM_TYP_MIN_MIN.csv", includedSheets, False, 8, 6, True, 15, 10) _
\par \hich\af37\dbch\af31505\loch\f37     )
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     ' Process each SDF configura\hich\af37\dbch\af31505\loch\f37 tion
\par \hich\af37\dbch\af31505\loch\f37     Dim config As Variant
\par \hich\af37\dbch\af31505\loch\f37     For Each config In exportConfigs
\par \hich\af37\dbch\af31505\loch\f37         Dim exportWB As Workbook
\par \hich\af37\dbch\af31505\loch\f37         Set exportWB = Workbooks.Add
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Setup headers
\par \hich\af37\dbch\af31505\loch\f37         With exportWB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37             .Cells(1, 1).Value = "A"
\par \hich\af37\dbch\af31505\loch\f37             .Cel\hich\af37\dbch\af31505\loch\f37 ls(1, 2).Value = ""
\par \hich\af37\dbch\af31505\loch\f37             .Cells(1, 3).Value = ""
\par \hich\af37\dbch\af31505\loch\f37             
\par \hich\af37\dbch\af31505\loch\f37             Select Case config(7) ' targetCol
\par \hich\af37\dbch\af31505\loch\f37                 Case 4: .Cells(1, 4).Value = "TYP_MAX Data"
\par \hich\af37\dbch\af31505\loch\f37                 Case 6: .Cells(1, 6).Value = "TYP_MIN Data"
\par \hich\af37\dbch\af31505\loch\f37                 Case \hich\af37\dbch\af31505\loch\f37 8: .Cells(1, 8).Value = "MAX_MAX Data"
\par \hich\af37\dbch\af31505\loch\f37                 Case 10: .Cells(1, 10).Value = "MIN_MIN Data"
\par \hich\af37\dbch\af31505\loch\f37             End Select
\par \hich\af37\dbch\af31505\loch\f37             
\par \hich\af37\dbch\af31505\loch\f37             If config(2) Then ' isTYP_MAX
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(1, 11).Value = "SV Test Name"
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(1, 12).Value = "C Test Name"
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(1, 13).Value = "Test ID"
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(1, 15).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37             Else
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(1, 11).Value = "S\hich\af37\dbch\af31505\loch\f37 V Test Name"
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(1, 12).Value = "Test ID"
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(1, 14).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Process worksheets
\par \hich\af37\dbch\af31505\loch\f37         Dim exportRow As Long: exportRow = 2
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         For Each ws I\hich\af37\dbch\af31505\loch\f37 n ThisWorkbook.Worksheets
\par \hich\af37\dbch\af31505\loch\f37             ' Check if sheet should be processed
\par \hich\af37\dbch\af31505\loch\f37             Dim shouldProcess As Boolean
\par \hich\af37\dbch\af31505\loch\f37             shouldProcess = False
\par \hich\af37\dbch\af31505\loch\f37             
\par \hich\af37\dbch\af31505\loch\f37             If config(5) Then ' isInclusiveFilter
\par \hich\af37\dbch\af31505\loch\f37                 For k = LBound(config(1)) T\hich\af37\dbch\af31505\loch\f37 o UBound(config(1))
\par \hich\af37\dbch\af31505\loch\f37                     If ws.Name = CStr(config(1)(k)) Then
\par \hich\af37\dbch\af31505\loch\f37                         shouldProcess = True
\par \hich\af37\dbch\af31505\loch\f37                         Exit For
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 Next k
\par \hich\af37\dbch\af31505\loch\f37             Else
\par \hich\af37\dbch\af31505\loch\f37                 shouldProcess = True
\par \hich\af37\dbch\af31505\loch\f37                 For k = LBound(config(1)) To UBound(config(1))
\par \hich\af37\dbch\af31505\loch\f37                     If ws.Name = CStr(config(1)(k)) Then
\par \hich\af37\dbch\af31505\loch\f37                         shouldProcess = False
\par \hich\af37\dbch\af31505\loch\f37                         Exit For
\par \hich\af37\dbch\af31505\loch\f37                     \hich\af37\dbch\af31505\loch\f37 End If
\par \hich\af37\dbch\af31505\loch\f37                 Next k
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37             
\par \hich\af37\dbch\af31505\loch\f37             If shouldProcess Then
\par \hich\af37\dbch\af31505\loch\f37                 ' Find header row and Test ID column
\par \hich\af37\dbch\af31505\loch\f37                 headerRow = 0: testIDCol = 0
\par \hich\af37\dbch\af31505\loch\f37                 lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37                 
\par \hich\af37\dbch\af31505\loch\f37                 For i = 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37                     For j = 1 To ws.Cells(i, ws.Columns.Count).End(xlToLeft).Column
\par \hich\af37\dbch\af31505\loch\f37                         If Trim(CStr(ws.Cells(i, j)\hich\af37\dbch\af31505\loch\f37 .Value)) = "Test ID" Then
\par \hich\af37\dbch\af31505\loch\f37                             headerRow = i
\par \hich\af37\dbch\af31505\loch\f37                             testIDCol = j
\par \hich\af37\dbch\af31505\loch\f37                             Exit For
\par \hich\af37\dbch\af31505\loch\f37                         End If
\par \hich\af37\dbch\af31505\loch\f37                     Next j
\par \hich\af37\dbch\af31505\loch\f37                     If headerRow > 0 Then Exit For
\par \hich\af37\dbch\af31505\loch\f37                 Next i
\par \hich\af37\dbch\af31505\loch\f37                 
\par \hich\af37\dbch\af31505\loch\f37                 If headerRow > 0 Then
\par \hich\af37\dbch\af31505\loch\f37                     ' Find necessary columns
\par \hich\af37\dbch\af31505\loch\f37                     svTestCol = 0: cTestCol = 0: ownerCol = 0
\par \hich\af37\dbch\af31505\loch\f37                     
\par \hich\af37\dbch\af31505\loch\f37                     For j = 1 To ws.Cells(headerRow, ws.Columns.Count).End(xlToLeft).Column
\par \hich\af37\dbch\af31505\loch\f37                         Select Case Trim(CStr(ws.Cells(headerRow, j).Value))
\par \hich\af37\dbch\af31505\loch\f37                             Case "SV Test Name": svTestCol = j
\par \hich\af37\dbch\af31505\loch\f37                         \hich\af37\dbch\af31505\loch\f37     Case "C Test Name": cTestCol = j
\par \hich\af37\dbch\af31505\loch\f37                             Case "Owner": ownerCol = j
\par \hich\af37\dbch\af31505\loch\f37                         End Select
\par \hich\af37\dbch\af31505\loch\f37                     Next j
\par \hich\af37\dbch\af31505\loch\f37                     
\par \hich\af37\dbch\af31505\loch\f37                     ' Copy matching data
\par \hich\af37\dbch\af31505\loch\f37                     For i = headerRow + \hich\af37\dbch\af31505\loch\f37 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37                         If Not IsEmpty(ws.Cells(i, testIDCol)) And _
\par \hich\af37\dbch\af31505\loch\f37                            Not IsEmpty(ws.Cells(i, ownerCol)) And _
\par \hich\af37\dbch\af31505\loch\f37                            LCase(Trim(CStr(ws.Cells(i, config(3)).Value))) = "yes" Then
\par \hich\af37\dbch\af31505\loch\f37                   \hich\af37\dbch\af31505\loch\f37           
\par \hich\af37\dbch\af31505\loch\f37                             ' Verify Test ID and Owner contain actual values
\par \hich\af37\dbch\af31505\loch\f37                             Dim testID As String, owner As String
\par \hich\af37\dbch\af31505\loch\f37                             testID = Trim(CStr(ws.Cells(i, testIDCol).Value))
\par \hich\af37\dbch\af31505\loch\f37                         \hich\af37\dbch\af31505\loch\f37     owner = Trim(CStr(ws.Cells(i, ownerCol).Value))
\par \hich\af37\dbch\af31505\loch\f37                             
\par \hich\af37\dbch\af31505\loch\f37                             If testID <> "" And owner <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                                 With exportWB.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37                                     ' Add extracted da\hich\af37\dbch\af31505\loch\f37 ta in the correct target column
\par \hich\af37\dbch\af31505\loch\f37                                     If config(6) > 0 And config(7) > 0 Then
\par \hich\af37\dbch\af31505\loch\f37                                         .Cells(exportRow, config(7)).Value = CStr(ws.Cells(i, config(6)).Value)
\par \hich\af37\dbch\af31505\loch\f37                                     \hich\af37\dbch\af31505\loch\f37 End If
\par \hich\af37\dbch\af31505\loch\f37                                     
\par \hich\af37\dbch\af31505\loch\f37                                     ' Dynamic columns based on type
\par \hich\af37\dbch\af31505\loch\f37                                     If config(2) Then ' isTYP_MAX
\par \hich\af37\dbch\af31505\loch\f37                                         If svTestCol > 0 Then .Cells(exportRow, 11).Value = CStr(ws.Cells(i, svTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                                         If cTestCol > 0 Then .Cells(exportRow, 12).Value = CStr(ws.Cells(i, cTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37     \hich\af37\dbch\af31505\loch\f37                                     .Cells(exportRow, 13).Value = testID
\par \hich\af37\dbch\af31505\loch\f37                                         .Cells(exportRow, 15).Value = owner
\par \hich\af37\dbch\af31505\loch\f37                                     Else
\par \hich\af37\dbch\af31505\loch\f37                                         If svTestCol > 0 Then .Cel\hich\af37\dbch\af31505\loch\f37 ls(exportRow, 11).Value = CStr(ws.Cells(i, svTestCol).Value)
\par \hich\af37\dbch\af31505\loch\f37                                         .Cells(exportRow, 12).Value = testID
\par \hich\af37\dbch\af31505\loch\f37                                         .Cells(exportRow, 14).Value = owner
\par \hich\af37\dbch\af31505\loch\f37                                     End If
\par \hich\af37\dbch\af31505\loch\f37                                 End With
\par \hich\af37\dbch\af31505\loch\f37                                 exportRow = exportRow + 1
\par \hich\af37\dbch\af31505\loch\f37                             End If
\par \hich\af37\dbch\af31505\loch\f37                         End If
\par \hich\af37\dbch\af31505\loch\f37                     Next i
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next ws
\par \hich\af37\dbch\af31505\loch\f37      \hich\af37\dbch\af31505\loch\f37    
\par \hich\af37\dbch\af31505\loch\f37         ' Save and close SDF workbook
\par \hich\af37\dbch\af31505\loch\f37         exportWB.SaveAs Filename:=basePath & config(0), FileFormat:=xlCSV, CreateBackup:=False
\par \hich\af37\dbch\af31505\loch\f37         exportWB.Close SaveChanges:=False
\par \hich\af37\dbch\af31505\loch\f37     Next config
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     ' Save and close main workbooks
\par \hich\af37\dbch\af31505\loch\f37     upfWB.SaveAs Filename:=basePath & "TP_COVERAGE_UPF.csv", FileFormat:=xlCSV, CreateBackup:=False
\par \hich\af37\dbch\af31505\loch\f37     pg0WB.SaveAs Filename:=basePath & "TP_COVERAGE_PG0_DELAY.csv", FileFormat:=xlCSV, CreateBackup:=False
\par \hich\af37\dbch\af31505\loch\f37     shMemUpfWB.SaveAs Filename:=basePath & "TP_COV\hich\af37\dbch\af31505\loch\f37 ERAGE_SH_MEM_UPF.csv", FileFormat:=xlCSV, CreateBackup:=False
\par \hich\af37\dbch\af31505\loch\f37     shMemPg0WB.SaveAs Filename:=basePath & "TP_COVERAGE_SH_MEM_PG0_DELAY.csv", FileFormat:=xlCSV, CreateBackup:=False
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     upfWB.Close SaveChanges:=False
\par \hich\af37\dbch\af31505\loch\f37     pg0WB.Close SaveChanges:=False
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37    shMemUpfWB.Close SaveChanges:=False
\par \hich\af37\dbch\af31505\loch\f37     shMemPg0WB.Close SaveChanges:=False
\par \hich\af37\dbch\af31505\loch\f37     Call UpdateTPCoverageAll
\par \hich\af37\dbch\af31505\loch\f37     Exit Sub
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37 ErrorHandler:
\par \hich\af37\dbch\af31505\loch\f37     MsgBox "Error: " & Err.Description, vbCritical
\par \hich\af37\dbch\af31505\loch\f37 End Sub
\par \hich\af37\dbch\af31505\loch\f37 Private Sub UpdateTPCoverageAll()
\par \hich\af37\dbch\af31505\loch\f37     ' Constants for con\hich\af37\dbch\af31505\loch\f37 figuration
\par \hich\af37\dbch\af31505\loch\f37     Const CONFIG_UPF = "UPF,TP_COVERAGE_UPF,Regression,TP_COVERAGE_UPF,E,H,C,I"
\par \hich\af37\dbch\af31505\loch\f37     Const CONFIG_PG0 = "PG0,TP_COVERAGE_PG0_DELAY,Regression_PG0,TP_COVERAGE_PG0_DELAY,D,G,C,H"
\par \hich\af37\dbch\af31505\loch\f37     Const CONFIG_SH_MEM_UPF = "SH_MEM_UPF,TP_COVERAGE_SHMEM_UPF,Regression_SH_MEM,TP_COVERAGE_SH_MEM_UPF,E,G,C,H"
\par \hich\af37\dbch\af31505\loch\f37     Const CONFIG_SH_MEM_PG0 = "SH_MEM_PG0,TP_C\hich\af37\dbch\af31505\loch\f37 OVERAGE_SHMEM_PG0_DELAY,Regression_SH_MEM_PG0,TP_COVERAGE_SH_MEM_PG0_DELAY,D,F,C,G"
\par \hich\af37\dbch\af31505\loch\f37     ' Get user choice
\par \hich\af37\dbch\af31505\loch\f37     Dim userChoice As String, ws As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     userChoice = InputBox("1. UPF" & vbNewLine & "2. PG0" & vbNewLine & "3. SH_MEM_UPF" & vbNewLine & _
\par \hich\af37\dbch\af31505\loch\f37       "4. SH_MEM_PG0" & vbNewLine & "5. TP_COVERAGE_CT_SDF" & vbNewLine & "6. TP_COVERAGE_SHMEM_SDF", _
\par \hich\af37\dbch\af31505\loch\f37       "Select Configuration")
\par \hich\af37\dbch\af31505\loch\f37     If userChoice = "" Or Not IsNumeric(userChoice) Then Exit Sub
\par \hich\af37\dbch\af31505\loch\f37     Dim choiceNum As Integer: choiceNum = CInt(userChoice)
\par \hich\af37\dbch\af31505\loch\f37     If choiceNum < 1 Or choiceNum > 6 Then Exit Sub
\par \hich\af37\dbch\af31505\loch\f37     ' Variable to track the last row of previous data
\par \hich\af37\dbch\af31505\loch\f37     Dim lastPreviousRow As Long
\par \hich\af37\dbch\af31505\loch\f37     If choiceNum <= 4 Then
\par \hich\af37\dbch\af31505\loch\f37         ' Set configuration para\hich\af37\dbch\af31505\loch\f37 meters based on choice
\par \hich\af37\dbch\af31505\loch\f37         Dim configParams() As String
\par \hich\af37\dbch\af31505\loch\f37         Select Case choiceNum
\par \hich\af37\dbch\af31505\loch\f37             Case 1: configParams = Split(CONFIG_UPF, ",")
\par \hich\af37\dbch\af31505\loch\f37             Case 2: configParams = Split(CONFIG_PG0, ",")
\par \hich\af37\dbch\af31505\loch\f37             Case 3: configParams = Split(CONFIG_SH\hich\af37\dbch\af31505\loch\f37 _MEM_UPF, ",")
\par \hich\af37\dbch\af31505\loch\f37             Case 4: configParams = Split(CONFIG_SH_MEM_PG0, ",")
\par \hich\af37\dbch\af31505\loch\f37         End Select
\par \hich\af37\dbch\af31505\loch\f37         ' Setup worksheet
\par \hich\af37\dbch\af31505\loch\f37         On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37         Set ws = ThisWorkbook.Sheets(configParams(1))
\par \hich\af37\dbch\af31505\loch\f37         On Error GoTo 0
\par \hich\af37\dbch\af31505\loch\f37         Dim startRow As \hich\af37\dbch\af31505\loch\f37 Long
\par \hich\af37\dbch\af31505\loch\f37         If ws Is Nothing Then
\par \hich\af37\dbch\af31505\loch\f37             Set ws = ThisWorkbook.Sheets.Add(Before:=ThisWorkbook.Sheets(1))
\par \hich\af37\dbch\af31505\loch\f37             ws.Name = configParams(1)
\par \hich\af37\dbch\af31505\loch\f37             startRow = 1
\par \hich\af37\dbch\af31505\loch\f37             lastPreviousRow = 0
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             ' 1. FIRST PROCESS ROWS:\hich\af37\dbch\af31505\loch\f37  Compact data by removing rows with blank values in key column
\par \hich\af37\dbch\af31505\loch\f37             Dim r As Long, writeRow As Long
\par \hich\af37\dbch\af31505\loch\f37             writeRow = 1
\par \hich\af37\dbch\af31505\loch\f37             ' Get initial estimate of last row (will be refined later)
\par \hich\af37\dbch\af31505\loch\f37             lastPreviousRow = ws.Cells(ws.Rows.Count, configParams(5)).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             If lastPreviousRow > 0 Then
\par \hich\af37\dbch\af31505\loch\f37                 For r = 1 To lastPreviousRow
\par \hich\af37\dbch\af31505\loch\f37                \hich\af37\dbch\af31505\loch\f37      If Not IsEmpty(ws.Cells(r, configParams(7)).Value) And ws.Cells(r, configParams(7)).Value <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                         If r <> writeRow Then
\par \hich\af37\dbch\af31505\loch\f37                             ws.Range("C" & r & ":L" & r).Copy ws.Range("C" & writeRow)
\par \hich\af37\dbch\af31505\loch\f37                         End If
\par \hich\af37\dbch\af31505\loch\f37                         writeRow = writeRow + 1
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 Next r
\par \hich\af37\dbch\af31505\loch\f37                 If writeRow <= lastPreviousRow Then
\par \hich\af37\dbch\af31505\loch\f37                     ws.Range("C" & writeRow & ":L" & lastPreviousRow).Clear\hich\af37\dbch\af31505\loch\f37 Contents
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37             ' 2. FIND COLUMN WITH MOST DATA: Check columns A through AD for the one with data in furthest row
\par \hich\af37\dbch\af31505\loch\f37             Dim lastRowByCol As Long, highestLastRow As Long, colIndex As Integer
\par \hich\af37\dbch\af31505\loch\f37             h\hich\af37\dbch\af31505\loch\f37 ighestLastRow = 0
\par \hich\af37\dbch\af31505\loch\f37             For colIndex = 1 To 30  ' Column A to AD
\par \hich\af37\dbch\af31505\loch\f37                 lastRowByCol = ws.Cells(ws.Rows.Count, colIndex).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37                 If lastRowByCol > highestLastRow Then
\par \hich\af37\dbch\af31505\loch\f37                     highestLastRow = lastRowByCol + \hich\af37\dbch\af31505\loch\f37 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next colIndex
\par \hich\af37\dbch\af31505\loch\f37             lastPreviousRow = highestLastRow
\par \hich\af37\dbch\af31505\loch\f37             ' 3. DELETE ROWS: Remove rows below the last data row
\par \hich\af37\dbch\af31505\loch\f37             If lastPreviousRow < ws.Rows.Count Then
\par \hich\af37\dbch\af31505\loch\f37                 ws.Rows(lastPreviousRow & ":" & ws.Rows.Count).Delete
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37             ' 4. HIDE DATA: Hide the processed rows
\par \hich\af37\dbch\af31505\loch\f37             ws.Rows("1:" & (lastPreviousRow)).Hidden = True
\par \hich\af37\dbch\af31505\loch\f37             ' 5. ADD NEW DATA: Start adding after the l\hich\af37\dbch\af31505\loch\f37 ast row with data
\par \hich\af37\dbch\af31505\loch\f37             startRow = lastPreviousRow
\par \hich\af37\dbch\af31505\loch\f37             ws.Move Before:=ThisWorkbook.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         ' File paths
\par \hich\af37\dbch\af31505\loch\f37         Dim regressionFile As String: regressionFile = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\
sites\\\\dv\hich\af31506\dbch\af31505\loch\f31506 _team\\\\Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 
\f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 " & configParams(2) & ".csv"
\par \hich\af37\dbch\af31505\loch\f37         Dim tpTestFile As String: tpTestFile =\hich\af37\dbch\af31505\loch\f37  "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506 
 HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\TP_COVERAGE_SHEETS\\\\" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\TP_COVERAGE_SHEETS\\}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 
\f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 " & configParam\hich\af37\dbch\af31505\loch\f37 s(3) & ".csv"
\par \hich\af37\dbch\af31505\loch\f37         ' Open and process workbooks
\par \hich\af37\dbch\af31505\loch\f37         Dim regressionData As Workbook, TPTestData As Workbook
\par \hich\af37\dbch\af31505\loch\f37         Set regressionData = Workbooks.Open(regressionFile)
\par \hich\af37\dbch\af31505\loch\f37         Set TPTestData = Workbooks.Open(tpTestFile)
\par \hich\af37\dbch\af31505\loch\f37         If regressionData Is N\hich\af37\dbch\af31505\loch\f37 othing Or TPTestData Is Nothing Then
\par \hich\af37\dbch\af31505\loch\f37             MsgBox "Error opening CSV files. Please check file paths.", vbCritical
\par \hich\af37\dbch\af31505\loch\f37             Exit Sub
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         ' Copy TP Test data
\par \hich\af37\dbch\af31505\loch\f37         With TPTestData.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37             Dim lastRow As Long: lastRow = .Cells(.Rows.Count, configParams(5)).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             ' Always copy headers for each new section
\par \hich\af37\dbch\af31505\loch\f37             .Rows(1).Copy Destination:=ws.Range("A" & startRow)
\par \hich\af37\dbch\af31505\loch\f37             startRow = startRow + 1
\par \hich\af37\dbch\af31505\loch\f37        \hich\af37\dbch\af31505\loch\f37      ' Copy data
\par \hich\af37\dbch\af31505\loch\f37             .Range("A2:M" & lastRow).Copy Destination:=ws.Range("A" & startRow)
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         ' Match and update data
\par \hich\af37\dbch\af31505\loch\f37         Dim regLastRow As Long: regLastRow = regressionData.Sheets(1).Cells(regressionData.Sheets(1).Rows.Count, "A").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         Dim tpLastRow As Long: tpLastRow = ws.Cells(ws.Rows.Count, configParams(5)).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         Dim tpRow As Long,\hich\af37\dbch\af31505\loch\f37  regRow As Long, testID As String
\par \hich\af37\dbch\af31505\loch\f37         For tpRow = startRow To tpLastRow
\par \hich\af37\dbch\af31505\loch\f37             testID = ws.Cells(tpRow, configParams(5)).Value
\par \hich\af37\dbch\af31505\loch\f37             For regRow = 2 To regLastRow
\par \hich\af37\dbch\af31505\loch\f37                 If regressionData.Sheets(1).Cells(regRow, "E").Value = testID T\hich\af37\dbch\af31505\loch\f37 hen
\par \hich\af37\dbch\af31505\loch\f37                     ws.Cells(tpRow, configParams(6)).Value = regressionData.Sheets(1).Cells(regRow, "C").Value
\par \hich\af37\dbch\af31505\loch\f37                     ws.Cells(tpRow, configParams(4)).Value = regressionData.Sheets(1).Cells(regRow, "D").Value
\par \hich\af37\dbch\af31505\loch\f37                     Exit For
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37                End If
\par \hich\af37\dbch\af31505\loch\f37             Next regRow
\par \hich\af37\dbch\af31505\loch\f37         Next tpRow
\par \hich\af37\dbch\af31505\loch\f37         regressionData.Close False: TPTestData.Close False
\par \hich\af37\dbch\af31505\loch\f37         ApplyConditionalFormatting ws, configParams(6) & ":" & configParams(4), False
\par \hich\af37\dbch\af31505\loch\f37     Else
\par \hich\af37\dbch\af31505\loch\f37         ' Handle SDF options
\par \hich\af37\dbch\af31505\loch\f37         \hich\af37\dbch\af31505\loch\f37 Dim sheetName As String, configs As Variant, baseFiles As Variant, testIdColumn As String, tpMissingColumn As String
\par \hich\af37\dbch\af31505\loch\f37    If choiceNum = 5 Then
\par \hich\af37\dbch\af31505\loch\f37         sheetName = "TP_COVERAGE_CT_SDF"
\par \hich\af37\dbch\af31505\loch\f37         configs = Array("CT_TYP_MAX", "CT_TYP_MIN", "CT_TYP_MAX_MAX", "CT\hich\af37\dbch\af31505\loch\f37 _TYP_MIN_MIN")
\par \hich\af37\dbch\af31505\loch\f37         testIdColumn = "M"
\par \hich\af37\dbch\af31505\loch\f37         tpMissingColumn = "N"
\par \hich\af37\dbch\af31505\loch\f37     Else
\par \hich\af37\dbch\af31505\loch\f37         sheetName = "TP_COVERAGE_SHMEM_SDF"
\par \hich\af37\dbch\af31505\loch\f37         configs = Array("SHMEM_TYP_MAX", "SHMEM_TYP_MIN", "SHMEM_TYP_MAX_MAX", "SHMEM_TYP_MIN_MIN")
\par \hich\af37\dbch\af31505\loch\f37         testIdColumn = "L"
\par \hich\af37\dbch\af31505\loch\f37         tpMissingColumn = "M"
\par \hich\af37\dbch\af31505\loch\f37     End If
\par \hich\af37\dbch\af31505\loch\f37     baseFiles = Array()
\par \hich\af37\dbch\af31505\loch\f37     ReDim baseFiles(3)
\par \hich\af37\dbch\af31505\loch\f37     Dim i As Integer
\par \hich\af37\dbch\af31505\loch\f37     For i = 0 To 3
\par \hich\af37\dbch\af31505\loch\f37     baseFiles(i) = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents
\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\TP_COVERAGE_SHEETS\\\\TP_COVERAGE_" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\
dv_team\\Shared%20Documents\\Docs\\Eag\hich\af37\dbch\af31505\loch\f37 le_A0\\TestPlan\\TP_COVERAGE_SHEETS\\TP_COVERAGE_}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 
\f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 " & configs(i) & ".csv"
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     ' Setup worksheet
\par \hich\af37\dbch\af31505\loch\f37     On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37     Set ws = ThisWorkbook.Sheets(sheetName)
\par \hich\af37\dbch\af31505\loch\f37     If ws Is Nothing Then
\par \hich\af37\dbch\af31505\loch\f37         Set ws = ThisWorkbook.Sheets.Add(Before:=ThisWorkb\hich\af37\dbch\af31505\loch\f37 ook.Sheets(1))
\par \hich\af37\dbch\af31505\loch\f37         ws.Name = sheetName
\par \hich\af37\dbch\af31505\loch\f37         startRow = 1
\par \hich\af37\dbch\af31505\loch\f37         lastPreviousRow = 0
\par \hich\af37\dbch\af31505\loch\f37     Else
\par \hich\af37\dbch\af31505\loch\f37         ' Process existing data
\par \hich\af37\dbch\af31505\loch\f37         Dim rSDF As Long, writeRowSDF As Long
\par \hich\af37\dbch\af31505\loch\f37         writeRowSDF = 1
\par \hich\af37\dbch\af31505\loch\f37         ' Get last row of existing data
\par \hich\af37\dbch\af31505\loch\f37         lastP\hich\af37\dbch\af31505\loch\f37 reviousRow = ws.Cells(ws.Rows.Count, "L").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         If lastPreviousRow > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             ' Compact existing data
\par \hich\af37\dbch\af31505\loch\f37             For rSDF = 1 To lastPreviousRow
\par \hich\af37\dbch\af31505\loch\f37                 If Not IsEmpty(ws.Cells(rSDF, tpMissingColumn).Value) And ws.Cells(rSDF, tpMissingColumn).Value <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                     If rSDF <> writeRowSDF Then
\par \hich\af37\dbch\af31505\loch\f37                         ws.Range("C" & rSDF & ":P" & rSDF).Copy ws.Range("C" & writeR\hich\af37\dbch\af31505\loch\f37 owSDF)
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                     writeRowSDF = writeRowSDF + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next rSDF
\par \hich\af37\dbch\af31505\loch\f37             ' Clear any remaining data
\par \hich\af37\dbch\af31505\loch\f37             If writeRowSDF <= lastPreviousRow Then
\par \hich\af37\dbch\af31505\loch\f37                 ws.Range("C" & writeR\hich\af37\dbch\af31505\loch\f37 owSDF & ":P" & lastPreviousRow).ClearContents
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         ' Find highest row with data across all columns
\par \hich\af37\dbch\af31505\loch\f37         Dim lastRowBySDF As Long, highestLastRowSDF As Long, colSDF As Integer
\par \hich\af37\dbch\af31505\loch\f37         highestLastRowSDF = 0
\par \hich\af37\dbch\af31505\loch\f37         For\hich\af37\dbch\af31505\loch\f37  colSDF = 1 To 30
\par \hich\af37\dbch\af31505\loch\f37             lastRowBySDF = ws.Cells(ws.Rows.Count, colSDF).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             If lastRowBySDF > highestLastRowSDF Then
\par \hich\af37\dbch\af31505\loch\f37                 highestLastRowSDF = lastRowBySDF + 1
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next colSDF
\par \hich\af37\dbch\af31505\loch\f37         lastPreviousRow = highestLastRowSDF
\par \hich\af37\dbch\af31505\loch\f37         ' Delete excess rows
\par \hich\af37\dbch\af31505\loch\f37         If lastPreviousRow < ws.Rows.Count Then
\par \hich\af37\dbch\af31505\loch\f37             ws.Rows(lastPreviousRow & ":" & ws.Rows.Count).Delete
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         ' Hide processed rows
\par \hich\af37\dbch\af31505\loch\f37         ws.Rows("1:" & (lastPreviousRow)).Hidden = True
\par \hich\af37\dbch\af31505\loch\f37         ' Set start row for new data
\par \hich\af37\dbch\af31505\loch\f37         startRow = lastPreviousRow + 1
\par \hich\af37\dbch\af31505\loch\f37         ws.Move Before:=ThisWorkbook.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37     End If
\par \hich\af37\dbch\af31505\loch\f37     ' Process each configuration
\par \hich\af37\dbch\af31505\loch\f37     For i = 0 To 3
\par \hich\af37\dbch\af31505\loch\f37         Dim ba\hich\af37\dbch\af31505\loch\f37 seData As Workbook
\par \hich\af37\dbch\af31505\loch\f37         Set baseData = Workbooks.Open(baseFiles(i))
\par \hich\af37\dbch\af31505\loch\f37         With baseData.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37             lastRow = .Cells(.Rows.Count, "K").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             If i = 0 Then
\par \hich\af37\dbch\af31505\loch\f37                 ' Add headers for first configuration
\par \hich\af37\dbch\af31505\loch\f37             \hich\af37\dbch\af31505\loch\f37     .Range("A1:Q1").Copy Destination:=ws.Range("A" & startRow)
\par \hich\af37\dbch\af31505\loch\f37                 ' Set custom headers based on configuration type
\par \hich\af37\dbch\af31505\loch\f37                 With ws
\par \hich\af37\dbch\af31505\loch\f37                     If choiceNum = 5 Then  ' CT_SDF
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 3).Value = \hich\af37\dbch\af31505\loch\f37 "Current CT_TYP_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 4).Value = "Previous CT_TYP_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 5).Value = "Current CT_TYP_MIN"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 6).Value = "Previous CT_TYP_MIN"
\par \hich\af37\dbch\af31505\loch\f37               \hich\af37\dbch\af31505\loch\f37           .Cells(startRow, 7).Value = "Current CT_TYP_MAX_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 8).Value = "Previous CT_TYP_MAX_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 9).Value = "Current CT_TYP_MIN_MIN"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRo\hich\af37\dbch\af31505\loch\f37 w, 10).Value = "Previous CT_TYP_MIN_MIN"
\par \hich\af37\dbch\af31505\loch\f37                     Else  ' SHMEM_SDF
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 3).Value = "Current SHMEM_TYP_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 4).Value = "Previous SHMEM_TYP_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 5).Value = "Current SHMEM_TYP_MIN"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 6).Value = "Previous SHMEM_TYP_MIN"
\par \hich\af37\dbch\af31505\loch\f37                         .C\hich\af37\dbch\af31505\loch\f37 ells(startRow, 7).Value = "Current SHMEM_TYP_MAX_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 8).Value = "Previous SHMEM_TYP_MAX_MAX"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, 9).Value = "Current SHMEM_TYP_MIN_MIN"
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(startRow, \hich\af37\dbch\af31505\loch\f37 10).Value = "Previous SHMEM_TYP_MIN_MIN"
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 End With
\par \hich\af37\dbch\af31505\loch\f37                 ' Copy data
\par \hich\af37\dbch\af31505\loch\f37                 .Range("A2:Q" & lastRow).Copy Destination:=ws.Range("A" & (startRow + 1))
\par \hich\af37\dbch\af31505\loch\f37             Else
\par \hich\af37\dbch\af31505\loch\f37                 ' Copy specific columns based on configuration
\par \hich\af37\dbch\af31505\loch\f37                 Select Case i
\par \hich\af37\dbch\af31505\loch\f37                     Case 1: .Range("F2:F" & lastRow).Cop\hich\af37\dbch\af31505\loch\f37 y Destination:=ws.Range("F" & (startRow + 1))
\par \hich\af37\dbch\af31505\loch\f37                     Case 2: .Range("H2:H" & lastRow).Copy Destination:=ws.Range("H" & (startRow + 1))
\par \hich\af37\dbch\af31505\loch\f37                     Case 3: .Range("J2:J" & lastRow).Copy Destination:=ws.Range("J" & (startRow + 1))
\par \hich\af37\dbch\af31505\loch\f37       \hich\af37\dbch\af31505\loch\f37           End Select
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         baseData.Close False
\par \hich\af37\dbch\af31505\loch\f37         ' Process regression data
\par \hich\af37\dbch\af31505\loch\f37         regressionFile = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\
Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\R\hich\af31506\dbch\af31505\loch\f31506 EGRESSION_SHEETS\\\\Regression_" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 
\ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 " & configs(i) & ".csv"
\par \hich\af37\dbch\af31505\loch\f37         Set regressionData = Workbooks.Open(regressionFile)
\par \hich\af37\dbch\af31505\loch\f37         regLastRow = re\hich\af37\dbch\af31505\loch\f37 gressionData.Sheets(1).Cells(regressionData.Sheets(1).Rows.Count, "A").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         ' Update regression data
\par \hich\af37\dbch\af31505\loch\f37         For tpRow = startRow + 1 To startRow + lastRow - 1
\par \hich\af37\dbch\af31505\loch\f37             testID = ws.Cells(tpRow, testIdColumn).Value
\par \hich\af37\dbch\af31505\loch\f37             For regRow = 2 To regLastRow
\par \hich\af37\dbch\af31505\loch\f37                 If regressionData.Sheets(1).Cells(regRow, "E").Value = testID Then
\par \hich\af37\dbch\af31505\loch\f37                     ws.Cells(tpRow, 3 + (i * 2)).Value = regressionData.She\hich\af37\dbch\af31505\loch\f37 ets(1).Cells(regRow, "C").Value
\par \hich\af37\dbch\af31505\loch\f37                     Exit For
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next regRow
\par \hich\af37\dbch\af31505\loch\f37         Next tpRow
\par \hich\af37\dbch\af31505\loch\f37         regressionData.Close False
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37         ApplyConditionalFormatting ws, "C,D,E,F,G,H,I,J", True
\par \hich\af37\dbch\af31505\loch\f37     End If
\par \hich\af37\dbch\af31505\loch\f37     T\hich\af37\dbch\af31505\loch\f37 hisWorkbook.Save
\par \hich\af37\dbch\af31505\loch\f37     Call STATUS
\par \hich\af37\dbch\af31505\loch\f37     Exit Sub
\par \hich\af37\dbch\af31505\loch\f37 End Sub
\par 
\par \hich\af37\dbch\af31505\loch\f37 Private Function GetLastDataRow(ws As Worksheet) As Long
\par \hich\af37\dbch\af31505\loch\f37  Dim lastRow As Long
\par \hich\af37\dbch\af31505\loch\f37  Dim col As Long
\par \hich\af37\dbch\af31505\loch\f37  Dim maxRow As Long
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37  maxRow = 0
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37  ' Check all relevant columns (1 to 30) for the last row with data
\par \hich\af37\dbch\af31505\loch\f37  For col = 1 To 30
\par \hich\af37\dbch\af31505\loch\f37  lastRow = ws.Cells(ws.Rows.Count, col).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37  If lastRow > maxRow Then
\par \hich\af37\dbch\af31505\loch\f37  maxRow = lastRow
\par \hich\af37\dbch\af31505\loch\f37  End If
\par \hich\af37\dbch\af31505\loch\f37  Next col
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37  GetLastDataRow = maxRow
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37 Private Function ApplyConditionalFormatting(ws As Worksheet, targetColumns As String, Optional isSDF As Boolean = False)
\par \hich\af37\dbch\af31505\loch\f37     ws.Cells.FormatConditions.Delete
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     Dim formats As Variant
\par \hich\af37\dbch\af31505\loch\f37     formats = Array( _
\par \hich\af37\dbch\af31505\loch\f37         Array("passed", RGB(198, 239, 206),\hich\af37\dbch\af31505\loch\f37  RGB(0, 97, 0)), _
\par \hich\af37\dbch\af31505\loch\f37         Array("failed", RGB(255, 204, 204), RGB(192, 0, 0)), _
\par \hich\af37\dbch\af31505\loch\f37         Array("running", RGB(255, 217, 102), RGB(68, 114, 196)), _
\par \hich\af37\dbch\af31505\loch\f37         Array("stopped", RGB(231, 230, 230), RGB(38, 38, 38)), _
\par \hich\af37\dbch\af31505\loch\f37         Array("TBD", RGB(255, 242, 204), R\hich\af37\dbch\af31505\loch\f37 GB(0, 0, 0)) _
\par \hich\af37\dbch\af31505\loch\f37     )
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     If isSDF Then
\par \hich\af37\dbch\af31505\loch\f37         ws.Range("D:J").HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         ws.Range("D:J").VerticalAlignment = xlTop
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         Dim colArray As Variant: colArray = Split(targetColumns, ",")
\par \hich\af37\dbch\af31505\loch\f37         Dim col As Variant, \hich\af37\dbch\af31505\loch\f37 fmt As Variant
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         For Each col In colArray
\par \hich\af37\dbch\af31505\loch\f37             For Each fmt In formats
\par \hich\af37\dbch\af31505\loch\f37                 With ws.Range(col & ":" & col).FormatConditions.Add(Type:=xlTextString, String:=fmt(0), TextOperator:=xlContains)
\par \hich\af37\dbch\af31505\loch\f37                     .Interior.Color = fmt(1)
\par \hich\af37\dbch\af31505\loch\f37                     .Font.Color = fmt(2)
\par \hich\af37\dbch\af31505\loch\f37                     .Font.Bold = False
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37                End With
\par \hich\af37\dbch\af31505\loch\f37             Next fmt
\par \hich\af37\dbch\af31505\loch\f37         Next col
\par \hich\af37\dbch\af31505\loch\f37     Else
\par \hich\af37\dbch\af31505\loch\f37         With ws.Range(targetColumns)
\par \hich\af37\dbch\af31505\loch\f37             .HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37             .VerticalAlignment = xlTop
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         For Each fmt In formats
\par \hich\af37\dbch\af31505\loch\f37             With ws.Range(targetColumns).FormatConditions.Add(Type:=xlTextString, String:=fmt(0), TextOperator:=xlContains)
\par \hich\af37\dbch\af31505\loch\f37                 .Interior.Color = fmt(1)
\par \hich\af37\dbch\af31505\loch\f37                 .Font.Color = fmt(2)
\par \hich\af37\dbch\af31505\loch\f37                 .Font.\hich\af37\dbch\af31505\loch\f37 Bold = False
\par \hich\af37\dbch\af31505\loch\f37             End With
\par \hich\af37\dbch\af31505\loch\f37         Next fmt
\par \hich\af37\dbch\af31505\loch\f37     End If
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par 
\par \hich\af37\dbch\af31505\loch\f37 Private Sub STATUS()
\par \hich\af37\dbch\af31505\loch\f37       ' Constants
\par \hich\af37\dbch\af31505\loch\f37     Const SHEET_CHIP_TOP_UPF As String = "TP_COVERAGE_UPF"
\par \hich\af37\dbch\af31505\loch\f37     Const SHEET_CHIP_TOP_PG0_DELAY As String = "TP_COVERAGE_PG0_DELAY"
\par \hich\af37\dbch\af31505\loch\f37     Const SHEET_SHMEM_UPF As String = "TP_COVERAGE_SHMEM_UPF"
\par \hich\af37\dbch\af31505\loch\f37     Const SHEET_SHMEM_PG0_DELAY As String = "TP_COVERAGE_SHMEM_PG0_DELAY"
\par \hich\af37\dbch\af31505\loch\f37     Const SHEET_CT_SDF As String = "TP_COVERAGE_C\hich\af37\dbch\af31505\loch\f37 T_SDF"
\par \hich\af37\dbch\af31505\loch\f37     Const SHEET_SHMEM_SDF As String = "TP_COVERAGE_SHMEM_SDF"
\par \hich\af37\dbch\af31505\loch\f37     ' Global Excluded and Included Sheets (defined once)
\par \hich\af37\dbch\af31505\loch\f37     Dim excludedSheets As Variant
\par \hich\af37\dbch\af31505\loch\f37     Dim includedSheets As Variant
\par \hich\af37\dbch\af31505\loch\f37     ' Define excluded and included sheets once
\par \hich\af37\dbch\af31505\loch\f37     excludedShe\hich\af37\dbch\af31505\loch\f37 ets = Array("TP_COVERAGE_UPF", "TP_COVERAGE_SHMEM_SDF", "TP_COVERAGE_CT_SDF", "TP_COVERAGE_CT_TYP_MAX", "TP_COVERAGE_CT_TYP_MIN", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_SHMEM_TYP_MAX", "TP_COVERAGE_SHMEM_TYP_MIN", "TP_COVERAGE_CT_TYP_MAX_MAX", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_CT_TY\hich\af37\dbch\af31505\loch\f37 P_MIN_MIN", "TP_COVERAGE_SHMEM_TYP_MAX_MAX", "TP_COVERAGE_SHMEM_TYP_MIN_MIN", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_PG0_DELAY", "TP_COVERAGE_SH_MEM_UPF", "TP_COVERAGE_SH_MEM_PG0_DELAY", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_SHMEM_SDF_TYP_MIN", "TP_COVERAGE_SHMEM_SDF_TYP_MAX", "TP_COVER\hich\af37\dbch\af31505\loch\f37 AGE_CT_SDF_TYP_MIN", _
\par \hich\af37\dbch\af31505\loch\f37         "TP_COVERAGE_CT_SDF_TYP_MAX", "TP_COVERAGE_GLS_SDF", "GLS_SDF_SANITY_HP", "CHIP_TOP", "MBIST", _
\par \hich\af37\dbch\af31505\loch\f37         "PINMUX", "apb_i2c", "OSPI_SS", "JPEG_SS", "MRAM_SS", "ZAPHOD_SS", "ISP_SS", "SHARED_MEM_SS", _
\par \hich\af37\dbch\af31505\loch\f37         "MRAM_RC_SS", "C\hich\af37\dbch\af31505\loch\f37 VM_OCVM_SS", "CPI_ISP_SS", "MRAM_SS_OLD", "OSPI_SS_plan", "JPEG_SS_OLD")
\par \hich\af37\dbch\af31505\loch\f37       includedSheets = GetSheetsEndingWith("_SS")
\par \hich\af37\dbch\af31505\loch\f37     ' Variables
\par \hich\af37\dbch\af31505\loch\f37     Dim userChoice As String
\par \hich\af37\dbch\af31505\loch\f37     Dim ws As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Dim flag As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim i As Long, j As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim las\hich\af37\dbch\af31505\loch\f37 tRowSheet As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim testplanTotal As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim regressionTotal As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim tpTestsNotInRegression As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim sheetName As String
\par \hich\af37\dbch\af31505\loch\f37     Dim makeChanges As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim startColumn As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim lastHeaderColumn As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim notFoundColumn As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim checkColumn As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim missingInTP As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim CSV_FILE_PATH As String
\par \hich\af37\dbch\af31505\loch\f37     Dim counter As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowN As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowM As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim r\hich\af37\dbch\af31505\loch\f37 egressionMissingTests As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim SVtestNameCol As Integer
\par \hich\af37\dbch\af31505\loch\f37        ' User input for macro type
\par \hich\af37\dbch\af31505\loch\f37     userChoice = InputBox("Enter the macro to execute:" & vbCrLf & _
\par \hich\af37\dbch\af31505\loch\f37         "1. CHIP_TOP_UPF" & vbCrLf & _
\par \hich\af37\dbch\af31505\loch\f37         "2. CHIP_TOP_PG0_DELAY" & vbCrLf & _
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37       "3. SHMEM_UPF" & vbCrLf & _
\par \hich\af37\dbch\af31505\loch\f37         "4. SHMEM_PG0_DELAY" & vbCrLf & _
\par \hich\af37\dbch\af31505\loch\f37         "5. CT_SDF" & vbCrLf & _
\par \hich\af37\dbch\af31505\loch\f37         "6. SHMEM_SDF", "Choose Macro")
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37     Select Case userChoice
\par \hich\af37\dbch\af31505\loch\f37         Case "1" ' CHIP_TOP UPF
\par \hich\af37\dbch\af31505\loch\f37             sheetName = SHEET_CHIP_TOP_UPF
\par \hich\af37\dbch\af31505\loch\f37             makeChanges = True
\par \hich\af37\dbch\af31505\loch\f37             CSV_FILE_PATH = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\
Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 
https://alifsemi.sharepoint.com\\sites\\dv_team\\Share\hich\af37\dbch\af31505\loch\f37 d%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 
\ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 "
\par \hich\af37\dbch\af31505\loch\f37             lastHeaderColumn = 27
\par \hich\af37\dbch\af31505\loch\f37             notFoundColumn = 9
\par \hich\af37\dbch\af31505\loch\f37             checkColumn = 3
\par \hich\af37\dbch\af31505\loch\f37             regressionMissingTests = 15
\par \hich\af37\dbch\af31505\loch\f37             duplicateTestinRegression = 20
\par \hich\af37\dbch\af31505\loch\f37          \hich\af37\dbch\af31505\loch\f37    duplicateTestinTp = 24
\par \hich\af37\dbch\af31505\loch\f37             SVtestNameCol = 6
\par \hich\af37\dbch\af31505\loch\f37         Case "2" ' CHIP_TOP PG0 DELAY
\par \hich\af37\dbch\af31505\loch\f37             sheetName = SHEET_CHIP_TOP_PG0_DELAY
\par \hich\af37\dbch\af31505\loch\f37             makeChanges = False
\par \hich\af37\dbch\af31505\loch\f37             CSV_FILE_PATH = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\
\hich\af31506\dbch\af31505\loch\f31506 dv_team\\\\Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_PG0.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_PG0.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 
\ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 "
\par \hich\af37\dbch\af31505\loch\f37             lastHeaderColumn = 26
\par \hich\af37\dbch\af31505\loch\f37             notFoundColumn = 8
\par \hich\af37\dbch\af31505\loch\f37             checkColumn = 3
\par \hich\af37\dbch\af31505\loch\f37             regressionMissingTests = 14
\par \hich\af37\dbch\af31505\loch\f37             duplicateTestinRegression = 19
\par \hich\af37\dbch\af31505\loch\f37             duplicateTestinTp = 23
\par \hich\af37\dbch\af31505\loch\f37             SVtestNameCol = 5
\par \hich\af37\dbch\af31505\loch\f37         Case "3\hich\af37\dbch\af31505\loch\f37 " ' SHMEM UPF
\par \hich\af37\dbch\af31505\loch\f37             sheetName = SHEET_SHMEM_UPF
\par \hich\af37\dbch\af31505\loch\f37             makeChanges = True
\par \hich\af37\dbch\af31505\loch\f37             CSV_FILE_PATH = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\
Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_SH_\hich\af31506\dbch\af31505\loch\f31506 MEM.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_SH_MEM.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 
\af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 "
\par \hich\af37\dbch\af31505\loch\f37             lastHeaderColumn = 26
\par \hich\af37\dbch\af31505\loch\f37             notFoundColumn = 8
\par \hich\af37\dbch\af31505\loch\f37             checkColumn = 3
\par \hich\af37\dbch\af31505\loch\f37             regressionMissingTests = 14
\par \hich\af37\dbch\af31505\loch\f37             duplicateTestinRegression = 19
\par \hich\af37\dbch\af31505\loch\f37             duplicateTestinTp = 23
\par \hich\af37\dbch\af31505\loch\f37             SVtestNameCol = 6
\par \hich\af37\dbch\af31505\loch\f37         Case "4" ' SHMEM PG0 DELAY
\par \hich\af37\dbch\af31505\loch\f37             sheetName = SHEET_SHMEM_PG0_DELAY
\par \hich\af37\dbch\af31505\loch\f37             makeChanges = F\hich\af37\dbch\af31505\loch\f37 alse
\par \hich\af37\dbch\af31505\loch\f37             CSV_FILE_PATH = "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\
Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_SH_MEM_PG0.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 
https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\D\hich\af37\dbch\af31505\loch\f37 ocs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_SH_MEM_PG0.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 
\af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 "
\par \hich\af37\dbch\af31505\loch\f37             lastHeaderColumn = 25
\par \hich\af37\dbch\af31505\loch\f37             notFoundColumn = 7
\par \hich\af37\dbch\af31505\loch\f37             checkColumn = 3
\par \hich\af37\dbch\af31505\loch\f37             regressionMissingTests = 13
\par \hich\af37\dbch\af31505\loch\f37             duplicateTestinRegression = 18
\par \hich\af37\dbch\af31505\loch\f37             d\hich\af37\dbch\af31505\loch\f37 uplicateTestinTp = 22
\par \hich\af37\dbch\af31505\loch\f37             SVtestNameCol = 5
\par \hich\af37\dbch\af31505\loch\f37         Case "5" ' CT_SDF
\par \hich\af37\dbch\af31505\loch\f37             sheetName = SHEET_CT_SDF
\par \hich\af37\dbch\af31505\loch\f37             Call SDF_STATUS("1") ' Call SDF_STATUS with CT_SDF option
\par \hich\af37\dbch\af31505\loch\f37             Exit Sub
\par \hich\af37\dbch\af31505\loch\f37             
\par \hich\af37\dbch\af31505\loch\f37         Case "6" ' SHMEM_SDF
\par \hich\af37\dbch\af31505\loch\f37         \hich\af37\dbch\af31505\loch\f37     sheetName = SHEET_SHMEM_SDF
\par \hich\af37\dbch\af31505\loch\f37             Call SDF_STATUS("2") ' Call SDF_STATUS with SHMEM_SDF option
\par \hich\af37\dbch\af31505\loch\f37             Exit Sub
\par \hich\af37\dbch\af31505\loch\f37             
\par \hich\af37\dbch\af31505\loch\f37         Case Else
\par \hich\af37\dbch\af31505\loch\f37             MsgBox "Invalid choice! Please enter a number between 1 and 6.", vbExclamation
\par \hich\af37\dbch\af31505\loch\f37             Exit Sub
\par \hich\af37\dbch\af31505\loch\f37     End Select
\par \hich\af37\dbch\af31505\loch\f37       ' Get worksheet
\par \hich\af37\dbch\af31505\loch\f37     On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37     Set ws = Worksheets(sheetName)
\par \hich\af37\dbch\af31505\loch\f37     On Error GoTo 0
\par \hich\af37\dbch\af31505\loch\f37     If ws Is Nothing Then
\par \hich\af37\dbch\af31505\loch\f37         MsgBox "Worksheet '" & sheetName & "' not found!", vbCritical
\par \hich\af37\dbch\af31505\loch\f37         Exit Sub
\par \hich\af37\dbch\af31505\loch\f37     End If
\par \hich\af37\dbch\af31505\loch\f37        statsStartRow = ws.UsedRange.row
\par \hich\af37\dbch\af31505\loch\f37     While ws.Rows(statsStartRow).Hidden
\par \hich\af37\dbch\af31505\loch\f37         statsStartRow = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37     Wend
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37    ' Calculate totals using visible rows only
\par \hich\af37\dbch\af31505\loch\f37     lastRowSheet = ws.Cells(ws.Rows.Count, Choose(Val(userChoice), 8, 7, 7, 6)).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37     While lastRowSheet > 1 And ws.Rows(lastRowSheet).Hidden
\par \hich\af37\dbch\af31505\loch\f37         lastRowSheet = lastRowSheet - 1
\par \hich\af37\dbch\af31505\loch\f37     Wend
\par \hich\af37\dbch\af31505\loch\f37     tes\hich\af37\dbch\af31505\loch\f37 tplanTotal = 0
\par \hich\af37\dbch\af31505\loch\f37     For i = statsStartRow To lastRowSheet
\par \hich\af37\dbch\af31505\loch\f37         If Not ws.Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37             testplanTotal = testplanTotal + 1
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     testplanTotal = testplanTotal - 1
\par \hich\af37\dbch\af31505\loch\f37     ' Open CSV to get regression total
\par \hich\af37\dbch\af31505\loch\f37     Dim csvWorkbook As Workbook
\par \hich\af37\dbch\af31505\loch\f37     On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37     Set csvWorkbook = Workbooks.Open(CSV_FILE_PATH)
\par \hich\af37\dbch\af31505\loch\f37     On Error GoTo 0
\par \hich\af37\dbch\af31505\loch\f37     If csvWorkbook Is Nothing Then
\par \hich\af37\dbch\af31505\loch\f37         MsgBox "Failed to open the CSV file!", vbCritical
\par \hich\af37\dbch\af31505\loch\f37         Exit Sub
\par \hich\af37\dbch\af31505\loch\f37     End If
\par \hich\af37\dbch\af31505\loch\f37     ' \hich\af37\dbch\af31505\loch\f37 Get total rows from CSV (minus header row)
\par \hich\af37\dbch\af31505\loch\f37     regressionTotal = csvWorkbook.Sheets(1).Cells(csvWorkbook.Sheets(1).Rows.Count, "A").End(xlUp).row - 1
\par \hich\af37\dbch\af31505\loch\f37     csvWorkbook.Close SaveChanges:=False
\par \hich\af37\dbch\af31505\loch\f37     ' Process rows
\par \hich\af37\dbch\af31505\loch\f37     tpTestsNotInRegression = 0
\par \hich\af37\dbch\af31505\loch\f37     Dim visibleRowCount As Long
\par \hich\af37\dbch\af31505\loch\f37     visibleRowCount = 1
\par \hich\af37\dbch\af31505\loch\f37     For i = statsStartRow + 1 To lastRowSheet
\par \hich\af37\dbch\af31505\loch\f37         ' Skip hidden rows
\par \hich\af37\dbch\af31505\loch\f37         If ws.Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37             GoTo nextRow
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         ' Skip if already marked as "Test ID not foun\hich\af37\dbch\af31505\loch\f37 d"
\par \hich\af37\dbch\af31505\loch\f37         If Trim(ws.Cells(i, checkColumn).Value) = "" Then
\par \hich\af37\dbch\af31505\loch\f37             ws.Cells(i, notFoundColumn).Value = "Test ID not found"
\par \hich\af37\dbch\af31505\loch\f37             tpTestsNotInRegression = tpTestsNotInRegression + 1
\par \hich\af37\dbch\af31505\loch\f37             GoTo nextRow
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         ' Process based\hich\af37\dbch\af31505\loch\f37  on user choice
\par \hich\af37\dbch\af31505\loch\f37         Select Case userChoice
\par \hich\af37\dbch\af31505\loch\f37             Case "1"
\par \hich\af37\dbch\af31505\loch\f37                 flag = UPF_STATUS(ws, i, excludedSheets, makeChanges)
\par \hich\af37\dbch\af31505\loch\f37             Case "2"
\par \hich\af37\dbch\af31505\loch\f37                 flag = PG0_DELAY_STATUS(ws, i, excludedSheets)
\par \hich\af37\dbch\af31505\loch\f37             Case "3"
\par \hich\af37\dbch\af31505\loch\f37                 flag = SHMEM_UPF(ws, i, includedSheets, makeChanges)
\par \hich\af37\dbch\af31505\loch\f37             Case "4"
\par \hich\af37\dbch\af31505\loch\f37                 flag = SHMEM_PG0_DELAY(ws, i, includedSheets)
\par \hich\af37\dbch\af31505\loch\f37         End Select
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37        If flag = 0 Then
\par \hich\af37\dbch\af31505\loch\f37             ws.Cells(i, notFoundColumn).Value = "Test ID not found"
\par \hich\af37\dbch\af31505\loch\f37             tpTestsNotInRegression = tpTestsNotInRegression + 1
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37 nextRow:
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     ' Process CSV data
\par \hich\af37\dbch\af31505\loch\f37     Set csvWorkbook = Workbooks.Open(CSV_F\hich\af37\dbch\af31505\loch\f37 ILE_PATH)
\par \hich\af37\dbch\af31505\loch\f37     With csvWorkbook.Worksheets(1)
\par \hich\af37\dbch\af31505\loch\f37         Dim lastRowCSV As Long
\par \hich\af37\dbch\af31505\loch\f37         lastRowCSV = .Cells(.Rows.Count, 7).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         ws.Range(ws.Cells(statsStartRow, 2), ws.Cells(statsStartRow, startColumn + 1)).ClearContents
\par \hich\af37\dbch\af31505\loch\f37         .Range("G1").\hich\af37\dbch\af31505\loch\f37 Copy
\par \hich\af37\dbch\af31505\loch\f37         ws.Cells(statsStartRow, 2).PasteSpecial Paste:=xlPasteValues
\par \hich\af37\dbch\af31505\loch\f37         If lastRowCSV > 1 Then
\par \hich\af37\dbch\af31505\loch\f37             .Range("G2:G" & lastRowCSV).Copy
\par \hich\af37\dbch\af31505\loch\f37             ws.Cells(statsStartRow + 1, 2).PasteSpecial Paste:=xlPasteValues
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37     Set wbRegression = Workbooks.Open(CSV_FILE_PATH)
\par \hich\af37\dbch\af31505\loch\f37     Set testIDDict = CreateObject("Scripting.Dictionary")
\par \hich\af37\dbch\af31505\loch\f37     With wbRegression.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37         lastRowCSV = .Cells(.Rows.Count, "E").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         regressionTotal = lastRowCSV - 1
\par \hich\af37\dbch\af31505\loch\f37         ' Count occurrences of each test ID
\par \hich\af37\dbch\af31505\loch\f37         For i = 2 To lastRowCSV
\par \hich\af37\dbch\af31505\loch\f37             testID = Trim(.Cells(i, "E").Value)
\par \hich\af37\dbch\af31505\loch\f37             If testID <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                 If testIDDict.exists(testID) Then
\par \hich\af37\dbch\af31505\loch\f37                     testIDDict(testID) = testIDD\hich\af37\dbch\af31505\loch\f37 ict(testID) + 1
\par \hich\af37\dbch\af31505\loch\f37                 Else
\par \hich\af37\dbch\af31505\loch\f37                     testIDDict.Add testID, 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37         ' Output only the duplicate test IDs
\par \hich\af37\dbch\af31505\loch\f37         OutputRow = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37         With ws
\par \hich\af37\dbch\af31505\loch\f37             For Ea\hich\af37\dbch\af31505\loch\f37 ch key In testIDDict.keys
\par \hich\af37\dbch\af31505\loch\f37                 If testIDDict(key) > 1 Then
\par \hich\af37\dbch\af31505\loch\f37                     .Cells(OutputRow, duplicateTestinRegression).Value = key
\par \hich\af37\dbch\af31505\loch\f37                     OutputRow = OutputRow + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next key
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37     With ws
\par \hich\af37\dbch\af31505\loch\f37         .Cells(1, 1).Value = Choose(Val(userChoice), _
\par \hich\af37\dbch\af31505\loch\f37             "CHIP_TOP Coverage", "CHIP_TOP PG0 Coverage", "SH_MEM Coverage", "SH_MEM PG0 Coverage") & _
\par \hich\af37\dbch\af31505\loch\f37             " (" & Format(Date, "DD-MMM-YYYY") & ")"
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37   ' Process regression data
\par \hich\af37\dbch\af31505\loch\f37     Dim LastRowTestPlan As Long, LastRowRegression As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim TestPlanIDs As Range, RegressionIDs As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim RegressionID As Range
\par \hich\af37\dbch\af31505\loch\f37     LastRowTestPlan = ws.Cells(ws.Rows.Count, Choose(Val(userChoice), "H", "G", "G", "\hich\af37\dbch\af31505\loch\f37 F")).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37     LastRowRegression = csvWorkbook.Sheets(1).Cells(csvWorkbook.Sheets(1).Rows.Count, "E").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37     Set TestPlanIDs = ws.Range(ws.Cells(statsStartRow, Choose(Val(userChoice), 8, 7, 7, 6)), ws.Cells(LastRowTestPlan, Choose(Val(us\hich\af37\dbch\af31505\loch\f37 erChoice), 8, 7, 7, 6)))
\par \hich\af37\dbch\af31505\loch\f37     Set RegressionIDs = csvWorkbook.Sheets(1).Range("E2:E" & LastRowRegression)
\par \hich\af37\dbch\af31505\loch\f37     OutputRow = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37     For Each RegressionID In RegressionIDs
\par \hich\af37\dbch\af31505\loch\f37         If IsError(Application.Match(RegressionID.Value, TestPlanIDs, 0)) \hich\af37\dbch\af31505\loch\f37 Then
\par \hich\af37\dbch\af31505\loch\f37             ws.Cells(OutputRow, regressionMissingTests).Value = RegressionID.Value
\par \hich\af37\dbch\af31505\loch\f37             OutputRow = OutputRow + 1
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next RegressionID
\par \hich\af37\dbch\af31505\loch\f37        ' Initialize Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Set colMDict = CreateObject("Scripting.Dictionary")
\par \hich\af37\dbch\af31505\loch\f37     With ws
\par \hich\af37\dbch\af31505\loch\f37         lastRowM = .Cells(.Rows.Count, notFoundColumn - 1).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRowM
\par \hich\af37\dbch\af31505\loch\f37             testIDM = Trim(.Cells(i, notFoundColumn - 1).Value)
\par \hich\af37\dbch\af31505\loch\f37             If testIDM <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                 If colMDict.exists(testIDM) Then
\par \hich\af37\dbch\af31505\loch\f37                     colMDict(testIDM) = colMDict(testIDM) + 1
\par \hich\af37\dbch\af31505\loch\f37                 Else
\par \hich\af37\dbch\af31505\loch\f37                     colMDict.Add testIDM, 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37     \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37         OutputRowY = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37         For Each key In colMDict.keys
\par \hich\af37\dbch\af31505\loch\f37             If colMDict(key) > 1 Then
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(OutputRowY, duplicateTestinTp).Value = key
\par \hich\af37\dbch\af31505\loch\f37                 OutputRowY = OutputRowY + 1
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37        Next key
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37       lastRow = ws.Cells(ws.Rows.Count, notFoundColumn - 1).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37     Dim dict As Object
\par \hich\af37\dbch\af31505\loch\f37     Set dict = CreateObject("Scripting.Dictionary")
\par \hich\af37\dbch\af31505\loch\f37     For i = statsStartRow + 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37         Dim keyValue As \hich\af37\dbch\af31505\loch\f37 String
\par \hich\af37\dbch\af31505\loch\f37         keyValue = Trim(ws.Cells(i, notFoundColumn - 1).Value)
\par \hich\af37\dbch\af31505\loch\f37         If keyValue <> "" Then
\par \hich\af37\dbch\af31505\loch\f37             If Not dict.exists(keyValue) Then
\par \hich\af37\dbch\af31505\loch\f37                 dict.Add keyValue, i
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     ' Find last row with data in column X
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowX As Long
\par \hich\af37\dbch\af31505\loch\f37     lastRowX = ws.Cells(ws.Rows.Count, duplicateTestinRegression).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37     ' Compare and copy data
\par \hich\af37\dbch\af31505\loch\f37     For i = 2 To lastRowX  ' Assuming row 1 is header
\par \hich\af37\dbch\af31505\loch\f37         Dim compareValue As String
\par \hich\af37\dbch\af31505\loch\f37         compareValue = Trim(ws.Cells(i, duplicateTestinRegression).Value)
\par \hich\af37\dbch\af31505\loch\f37         ' If value exists in dictionary (was found in Column L)
\par \hich\af37\dbch\af31505\loch\f37         If compareValue <> "" And dict.exists(compareValue) Then
\par \hich\af37\dbch\af31505\loch\f37             ' Get \hich\af37\dbch\af31505\loch\f37 the row number from dictionary
\par \hich\af37\dbch\af31505\loch\f37             Dim matchRow As Long
\par \hich\af37\dbch\af31505\loch\f37             matchRow = dict(compareValue)
\par \hich\af37\dbch\af31505\loch\f37             ' Copy corresponding data from Column N to Column Y
\par \hich\af37\dbch\af31505\loch\f37             ws.Cells(i, duplicateTestinRegression + 1).Value = ws.Cells(matchRow, notF\hich\af37\dbch\af31505\loch\f37 oundColumn + 1).Value
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     With ws
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").ColumnWidth = 17
\par \hich\af37\dbch\af31505\loch\f37         .Columns("B").ColumnWidth = 22
\par \hich\af37\dbch\af31505\loch\f37         .Columns("C").ColumnWidth = 12
\par \hich\af37\dbch\af31505\loch\f37         .Columns(SVtestNameCol).ColumnWidth = 23
\par \hich\af37\dbch\af31505\loch\f37         .Columns(notFoundColum\hich\af37\dbch\af31505\loch\f37 n - 1).ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns(notFoundColumn).ColumnWidth = 18
\par \hich\af37\dbch\af31505\loch\f37         .Columns(notFoundColumn + 1).ColumnWidth = 10
\par \hich\af37\dbch\af31505\loch\f37         .Columns(notFoundColumn + 2).ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns(notFoundColumn + 3).ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns(notFoundColumn + 4).ColumnWidth = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns(notFoundColumn + 5).ColumnWidth = 6
\par \hich\af37\dbch\af31505\loch\f37         .Columns(regressionMissingTests).ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns(regressionMissingTest\hich\af37\dbch\af31505\loch\f37 s + 1).ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns(regressionMissingTests + 2).ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns(regressionMissingTests + 3).ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns(regressionMissingTests + 4).ColumnWidth = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns(duplicateTestinRegression).Col\hich\af37\dbch\af31505\loch\f37 umnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns(duplicateTestinRegression + 1).ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns(duplicateTestinRegression + 2).ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns(duplicateTestinRegression + 3).ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns(duplicateTestinTp).ColumnWidth\hich\af37\dbch\af31505\loch\f37  = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns(duplicateTestinTp + 2).ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, 1).Value = Choose(Val(userChoice), _
\par \hich\af37\dbch\af31505\loch\f37             "CHIP_TOP Coverage", "CHIP_TOP PG0 Coverage", "SH_MEM Coverage", "SH_MEM PG0 Coverage") & _
\par \hich\af37\dbch\af31505\loch\f37             " (" & For\hich\af37\dbch\af31505\loch\f37 mat(Date, "DD-MMM-YYYY") & ")"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, 2).Value = "Regression Sheets"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, notFoundColumn).Value = "TP tests missing from regression"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, notFoundColumn + 2).Value = "Comment"
\par \hich\af37\dbch\af31505\loch\f37        \hich\af37\dbch\af31505\loch\f37  .Cells(statsStartRow, notFoundColumn + 3).Value = "Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests - 1).Value = "Sr.No"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests).Value = "Regression tests missing in TP"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 1).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 2).Value = "Comment"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 3).Value = "Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, r\hich\af37\dbch\af31505\loch\f37 egressionMissingTests + 5).Value = "Duplicate Test ID's in regression"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 6).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 7).Value = "Comment"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 8).Value = "Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 9).Value = "Duplicate Test ID's in Testplan"
\par \hich\af37\dbch\af31505\loch\f37      \hich\af37\dbch\af31505\loch\f37    .Cells(statsStartRow, regressionMissingTests + 10).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 11).Value = "Comment"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, regressionMissingTests + 12).Value = "Status"
\par \hich\af37\dbch\af31505\loch\f37         With ws
\par \hich\af37\dbch\af31505\loch\f37         missingIn\hich\af37\dbch\af31505\loch\f37 TP = .Cells(.Rows.Count, regressionMissingTests).End(xlUp).row - statsStartRow
\par \hich\af37\dbch\af31505\loch\f37         ' Update missingInTP count in statistics
\par \hich\af37\dbch\af31505\loch\f37         If missingInTP > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             .Cells(statsStartRow + 12, 1).Value = missingInTP
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             .Cells(st\hich\af37\dbch\af31505\loch\f37 atsStartRow + 12, 1).Value = 0
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         ' Get last row with data in regression missing tests column
\par \hich\af37\dbch\af31505\loch\f37         lastRowN = .Cells(.Rows.Count, regressionMissingTests).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         ' Add sequential numbers for visible rows with missing te\hich\af37\dbch\af31505\loch\f37 sts
\par \hich\af37\dbch\af31505\loch\f37         counter = 1
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRowN
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 If Not IsEmpty(.Cells(i, regressionMissingTests).Value) Then
\par \hich\af37\dbch\af31505\loch\f37                     .Cells(i, regressionMissingTests - 1).Value = cou\hich\af37\dbch\af31505\loch\f37 nter
\par \hich\af37\dbch\af31505\loch\f37                     counter = counter + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         With ws
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 1, 1).Value = "Testplan Total Tests"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 2, 1).Value = testplanTotal
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 3, 1).Value = "Regression Total Tests"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 4, 1).Value = regressionTota\hich\af37\dbch\af31505\loch\f37 l
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 5, 1).Value = "Testplan vs. Regression coverage"
\par \hich\af37\dbch\af31505\loch\f37         If testplanTotal > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             coverage = ((testplanTotal - tpTestsNotInRegression) / testplanTotal) * 100
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             coverage = 0
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 6, 1).Value = Format(coverage, "0.00") & "%"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 7, 1).Value = "Regression vs. Testplan coverage"
\par \hich\af37\dbch\af31505\loch\f37         If regressionTotal > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             coverage = ((regressionTotal - missingInTP) / regre\hich\af37\dbch\af31505\loch\f37 ssionTotal) * 100
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             coverage = 0
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 8, 1).Value = Format(coverage, "0.00") & "%"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 9, 1).Value = "TP tests not in regression:"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 10,\hich\af37\dbch\af31505\loch\f37  1).Value = tpTestsNotInRegression
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 11, 1).Value = "Regression tests not in TP"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 13, 1).Value = "Duplicate tests in regression"
\par \hich\af37\dbch\af31505\loch\f37          duplicateTests = 0
\par \hich\af37\dbch\af31505\loch\f37         Dim lastDuplicateRow As Long
\par \hich\af37\dbch\af31505\loch\f37    \hich\af37\dbch\af31505\loch\f37      lastDuplicateRow = .Cells(.Rows.Count, duplicateTestinRegression).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         ' Count visible rows only
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastDuplicateRow
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 If Not IsEmpty(.Cells(i, duplicateTestinRegression).Value) Then
\par \hich\af37\dbch\af31505\loch\f37                     duplicateTests = duplicateTests + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37         ' Update duplicate tests count
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStar\hich\af37\dbch\af31505\loch\f37 tRow + 14, 1).Value = duplicateTests
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37         ' Header Formatting
\par \hich\af37\dbch\af31505\loch\f37         With .Range(.Cells(statsStartRow, 1), .Cells(statsStartRow, lastHeaderColumn))
\par \hich\af37\dbch\af31505\loch\f37             .HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37             .VerticalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37      \hich\af37\dbch\af31505\loch\f37        .WrapText = True
\par \hich\af37\dbch\af31505\loch\f37             .Font.Bold = True
\par \hich\af37\dbch\af31505\loch\f37             .Interior.Color = RGB(200, 200, 200) ' Darker grey background
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         ' Clear all existing borders
\par \hich\af37\dbch\af31505\loch\f37         .Cells.Borders.LineStyle = xlNone
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37         ' First border: Column\hich\af37\dbch\af31505\loch\f37  A to notFoundColumn+3
\par \hich\af37\dbch\af31505\loch\f37         lastRowA = .Cells(.Rows.Count, "C").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         If lastRowA > statsStartRow Then
\par \hich\af37\dbch\af31505\loch\f37             .Range(.Cells(statsStartRow, 1), .Cells(lastRowA, notFoundColumn + 3)).Borders.LineStyle = xlContinuous
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37         ' Second border: regressionMissingTests-1 to regressionMissingTests+3
\par \hich\af37\dbch\af31505\loch\f37         lastRowM = .Cells(.Rows.Count, regressionMissingTests).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         If lastRowM > statsStartRow Then
\par \hich\af37\dbch\af31505\loch\f37             .Range(.Cells(statsStartRow, regressionMissingTe\hich\af37\dbch\af31505\loch\f37 sts - 1), .Cells(lastRowM, regressionMissingTests + 3)).Borders.LineStyle = xlContinuous
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37         ' Third border: duplicateTestinRegression to duplicateTestinRegression+7
\par \hich\af37\dbch\af31505\loch\f37         lastRowS = .Cells(.Rows.Count, duplicateTestinRegression).End\hich\af37\dbch\af31505\loch\f37 (xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         If lastRowS > statsStartRow Then
\par \hich\af37\dbch\af31505\loch\f37             .Range(.Cells(statsStartRow, duplicateTestinRegression), .Cells(lastRowS, duplicateTestinRegression + 7)).Borders.LineStyle = xlContinuous
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         lastRow = .Cells(.Rows.Count, \hich\af37\dbch\af31505\loch\f37 "C").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         lastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column
\par \hich\af37\dbch\af31505\loch\f37         ' wrap all cells from row 2 to last row
\par \hich\af37\dbch\af31505\loch\f37         Set rng = .Range(.Cells(statsStartRow + 1, 1), .Cells(lastRow, lastCol))
\par \hich\af37\dbch\af31505\loch\f37         rng.WrapText = True
\par \hich\af37\dbch\af31505\loch\f37         .Column\hich\af37\dbch\af31505\loch\f37 s("A").HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").VerticalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns(regressionMissingTests - 1).HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns(regressionMissingTests - 1).VerticalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns(\hich\af37\dbch\af31505\loch\f37 "E").WrapText = False
\par \hich\af37\dbch\af31505\loch\f37         .Columns("G").WrapText = False
\par \hich\af37\dbch\af31505\loch\f37         .Columns("F").WrapText = False
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37     csvWorkbook.Close SaveChanges:=False
\par \hich\af37\dbch\af31505\loch\f37     ' Show completion message
\par \hich\af37\dbch\af31505\loch\f37     MsgBox "Process completed successfully for " & sheetName, vbInformation
\par \hich\af37\dbch\af31505\loch\f37 End Sub
\par \hich\af37\dbch\af31505\loch\f37 Private Function UPF_STATUS(ws As Worksheet, currentRow As Long, excludedSheets As Variant, makeChanges As Boolean) As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim targetSheet As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Dim last\hich\af37\dbch\af31505\loch\f37 RowWs As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim j As Long
\par \hich\af37\dbch\af31505\loch\f37     For Each targetSheet In Worksheets
\par \hich\af37\dbch\af31505\loch\f37         If Not IsInExcludedSheet(targetSheet.Name, excludedSheets) Then
\par \hich\af37\dbch\af31505\loch\f37             lastRowWs = targetSheet.Cells(targetSheet.Rows.Count, 4).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             For j = 6 To lastR\hich\af37\dbch\af31505\loch\f37 owWs
\par \hich\af37\dbch\af31505\loch\f37                 If targetSheet.Cells(j, 4).Value = ws.Cells(currentRow, 8).Value Then
\par \hich\af37\dbch\af31505\loch\f37                     If makeChanges Then
\par \hich\af37\dbch\af31505\loch\f37                         targetSheet.Cells(j, 6).Value = targetSheet.Cells(j, 5).Value
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37             \hich\af37\dbch\af31505\loch\f37         targetSheet.Cells(j, 5).Value = ws.Cells(currentRow, 3).Value
\par \hich\af37\dbch\af31505\loch\f37                     targetSheet.Cells(j, 8).Value = ws.Cells(currentRow, 5).Value
\par \hich\af37\dbch\af31505\loch\f37                     UPF_STATUS = 1
\par \hich\af37\dbch\af31505\loch\f37                     Exit Function
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next j
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next targetSheet
\par \hich\af37\dbch\af31505\loch\f37     UPF_STATUS = 0
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par \hich\af37\dbch\af31505\loch\f37 Private Function PG0_DELAY_STATUS(ws As Worksheet, currentRow As Long, excludedSheets As Variant) As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim targetSheet As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     \hich\af37\dbch\af31505\loch\f37 Dim lastRowWs As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim j As Long
\par \hich\af37\dbch\af31505\loch\f37     For Each targetSheet In Worksheets
\par \hich\af37\dbch\af31505\loch\f37         If Not IsInExcludedSheet(targetSheet.Name, excludedSheets) Then
\par \hich\af37\dbch\af31505\loch\f37             lastRowWs = targetSheet.Cells(targetSheet.Rows.Count, 4).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             For j = 6 To lastRowWs
\par \hich\af37\dbch\af31505\loch\f37                 If targetSheet.Cells(j, 4).Value = ws.Cells(currentRow, 7).Value Then
\par \hich\af37\dbch\af31505\loch\f37                     targetSheet.Cells(j, 7).Value = \hich\af37\dbch\af31505\loch\f37 ws.Cells(currentRow, 3).Value
\par \hich\af37\dbch\af31505\loch\f37                     PG0_DELAY_STATUS = 1
\par \hich\af37\dbch\af31505\loch\f37                     Exit Function
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next j
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next targetSheet
\par \hich\af37\dbch\af31505\loch\f37     PG0_DELAY_STATUS = 0
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par \hich\af37\dbch\af31505\loch\f37 Private Function SHMEM_UPF(ws As Wo\hich\af37\dbch\af31505\loch\f37 rksheet, currentRow As Long, includedSheets As Variant, makeChanges As Boolean) As Integer
\par \hich\af37\dbch\af31505\loch\f37         Dim targetSheet As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowWs As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim j As Long
\par \hich\af37\dbch\af31505\loch\f37     For Each targetSheet In Worksheets
\par \hich\af37\dbch\af31505\loch\f37         ' Use IsSheetIncluded function to che\hich\af37\dbch\af31505\loch\f37 ck sheet
\par \hich\af37\dbch\af31505\loch\f37         If IsSheetIncluded(targetSheet.Name, includedSheets) Then
\par \hich\af37\dbch\af31505\loch\f37             ' Process the included sheet
\par \hich\af37\dbch\af31505\loch\f37             lastRowWs = targetSheet.Cells(targetSheet.Rows.Count, 4).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             For j = 6 To lastRowWs
\par \hich\af37\dbch\af31505\loch\f37                 If tar\hich\af37\dbch\af31505\loch\f37 getSheet.Cells(j, 3).Value = ws.Cells(currentRow, 7).Value Then
\par \hich\af37\dbch\af31505\loch\f37                     ' Always update, even if current cell is empty
\par \hich\af37\dbch\af31505\loch\f37                     If makeChanges Then
\par \hich\af37\dbch\af31505\loch\f37                             targetSheet.Cells(j, 5).Value = targetSheet.Cells(j, 4).Value
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                     targetSheet.Cells(j, 4).Value = ws.Cells(currentRow, 3).Value
\par \hich\af37\dbch\af31505\loch\f37                     targetSheet.Cells(j, 7).Value = ws.Ce\hich\af37\dbch\af31505\loch\f37 lls(currentRow, 5).Value
\par \hich\af37\dbch\af31505\loch\f37                     SHMEM_UPF = 1
\par \hich\af37\dbch\af31505\loch\f37                     Exit Function
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next j
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next targetSheet
\par \hich\af37\dbch\af31505\loch\f37     SHMEM_UPF = 0
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par \hich\af37\dbch\af31505\loch\f37 Private Function SHMEM_PG0_DELAY(ws As \hich\af37\dbch\af31505\loch\f37 Worksheet, currentRow As Long, includedSheets As Variant) As Integer
\par \hich\af37\dbch\af31505\loch\f37     Dim targetSheet As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowWs As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim j As Long
\par \hich\af37\dbch\af31505\loch\f37     For Each targetSheet In Worksheets
\par \hich\af37\dbch\af31505\loch\f37         ' Use IsSheetIncluded function to check sheet
\par \hich\af37\dbch\af31505\loch\f37         If IsShee\hich\af37\dbch\af31505\loch\f37 tIncluded(targetSheet.Name, includedSheets) Then
\par \hich\af37\dbch\af31505\loch\f37             ' Process the included sheet
\par \hich\af37\dbch\af31505\loch\f37             lastRowWs = targetSheet.Cells(targetSheet.Rows.Count, 4).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             For j = 6 To lastRowWs
\par \hich\af37\dbch\af31505\loch\f37                 ' Compare Test ID
\par \hich\af37\dbch\af31505\loch\f37               \hich\af37\dbch\af31505\loch\f37   If targetSheet.Cells(j, 3).Value = ws.Cells(currentRow, 6).Value Then
\par \hich\af37\dbch\af31505\loch\f37                     targetSheet.Cells(j, 6).Value = ws.Cells(currentRow, 3).Value
\par \hich\af37\dbch\af31505\loch\f37                     SHMEM_PG0_DELAY = 1
\par \hich\af37\dbch\af31505\loch\f37                     Exit Function
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next j
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next targetSheet
\par \hich\af37\dbch\af31505\loch\f37     SHMEM_PG0_DELAY = 0
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par \hich\af37\dbch\af31505\loch\f37 Private Function IsInExcludedSheet(sheetName As String, excludedSheets As Variant) As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim i As \hich\af37\dbch\af31505\loch\f37 Integer
\par \hich\af37\dbch\af31505\loch\f37     For i = LBound(excludedSheets) To UBound(excludedSheets)
\par \hich\af37\dbch\af31505\loch\f37         If sheetName = excludedSheets(i) Then
\par \hich\af37\dbch\af31505\loch\f37             IsInExcludedSheet = True
\par \hich\af37\dbch\af31505\loch\f37             Exit Function
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     IsInExcludedSheet = False
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par \hich\af37\dbch\af31505\loch\f37 Private S\hich\af37\dbch\af31505\loch\f37 ub SDF_STATUS(sheetType As String)
\par \hich\af37\dbch\af31505\loch\f37    
\par \hich\af37\dbch\af31505\loch\f37     ' Variable declarations
\par \hich\af37\dbch\af31505\loch\f37     Dim makeChangestyp_max As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim makeChangestyp_min As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim makeChangesmaxmax As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim makeChangesminmin As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim excludedSheets As Variant
\par \hich\af37\dbch\af31505\loch\f37     Dim includedSheets As Variant
\par \hich\af37\dbch\af31505\loch\f37     Dim wsMain As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRow As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim lastCol As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim rng As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim testplanTotal As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim regressionTotal As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim CSV_FILE_PATHS As Variant
\par \hich\af37\dbch\af31505\loch\f37     Dim filePath As Variant
\par \hich\af37\dbch\af31505\loch\f37     Dim fileIndex As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim wbRegression As Workbook
\par \hich\af37\dbch\af31505\loch\f37     Dim CSV_FILE_PATH As String
\par \hich\af37\dbch\af31505\loch\f37     Dim mainLastRow As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim regressionLastRow As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim m\hich\af37\dbch\af31505\loch\f37 ainTestIDs As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim testIDDict As Object
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowCSV As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim i As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim testID As String
\par \hich\af37\dbch\af31505\loch\f37     Dim OutputRow As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim LastRowTestPlan As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim LastRowRegression As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim TestPlanIDs As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim Regressi\hich\af37\dbch\af31505\loch\f37 onIDs As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim RegressionID As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim tpTestsNotInRegression As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowT As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim missingInTP As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim coverage As Double
\par \hich\af37\dbch\af31505\loch\f37     Dim ws As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Dim sheetExcluded As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim sheetIncluded As Boolean
\par \hich\af37\dbch\af31505\loch\f37     Dim compareLastRow As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim compareTestIDCol As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim cell As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim found As Range
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowA As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim key As Variant
\par \hich\af37\dbch\af31505\loch\f37     Dim colMDict As Object
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowM As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim testIDM As String
\par \hich\af37\dbch\af31505\loch\f37     Dim OutputRowY As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim dict As Object
\par \hich\af37\dbch\af31505\loch\f37     Dim keyValue As String
\par \hich\af37\dbch\af31505\loch\f37     Dim lastRowX As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim compareValue As String
\par \hich\af37\dbch\af31505\loch\f37     Dim matchRow As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim duplicateTests As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim userInput As String
\par \hich\af37\dbch\af31505\loch\f37     Dim stats\hich\af37\dbch\af31505\loch\f37 StartRow As Long
\par \hich\af37\dbch\af31505\loch\f37     Dim visibleRowCount As Long
\par 
\par \hich\af37\dbch\af31505\loch\f37     On Error GoTo ErrorHandler
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Initialize variables
\par \hich\af37\dbch\af31505\loch\f37     makeChangestyp_max = True
\par \hich\af37\dbch\af31505\loch\f37     makeChangestyp_min = True
\par \hich\af37\dbch\af31505\loch\f37     makeChangesmaxmax = True
\par \hich\af37\dbch\af31505\loch\f37     makeChangesminmin = True
\par \hich\af37\dbch\af31505\loch\f37     tpTestsNotInRegression = 0
\par \hich\af37\dbch\af31505\loch\f37     visibleRowCount = 0
\par 
\par \hich\af37\dbch\af31505\loch\f37     Application.ScreenUpdating = False
\par \hich\af37\dbch\af31505\loch\f37     Application.Calculation = xlCalculationManual
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Define excluded/included sheets based on type
\par \hich\af37\dbch\af31505\loch\f37     If sheetType = "1" Then
\par \hich\af37\dbch\af31505\loch\f37         excludedSheets = Array\hich\af37\dbch\af31505\loch\f37 ("TP_COVERAGE_UPF", "TP_COVERAGE_SHMEM_SDF", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_CT_SDF", "TP_COVERAGE_CT_TYP_MAX", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_CT_TYP_MIN", "TP_COVERAGE_SHMEM_TYP_MAX", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_SHMEM_TYP_MIN", "TP_COVERAGE_CT_TYP_MAX_MAX", _
\par \hich\af37\dbch\af31505\loch\f37      \hich\af37\dbch\af31505\loch\f37        "TP_COVERAGE_CT_TYP_MIN_MIN", "TP_COVERAGE_SHMEM_TYP_MAX_MAX", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_SHMEM_TYP_MIN_MIN", "TP_COVERAGE_PG0_DELAY", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_SH_MEM_UPF", "TP_COVERAGE_SH_MEM_PG0_DELAY", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_SHMEM_SDF_TYP_M\hich\af37\dbch\af31505\loch\f37 IN", "TP_COVERAGE_SHMEM_SDF_TYP_MAX", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_CT_SDF_TYP_MIN", "TP_COVERAGE_CT_SDF_TYP_MAX", _
\par \hich\af37\dbch\af31505\loch\f37             "TP_COVERAGE_GLS_SDF", "GLS_SDF_SANITY_HP", "CHIP_TOP", "MBIST", _
\par \hich\af37\dbch\af31505\loch\f37             "PINMUX", "apb_i2c", "OSPI_SS", "JPEG_SS", "MRAM_SS\hich\af37\dbch\af31505\loch\f37 ", "ZAPHOD_SS", _
\par \hich\af37\dbch\af31505\loch\f37             "ISP_SS", "SHARED_MEM_SS", "MRAM_RC_SS", "CVM_OCVM_SS", "CPI_ISP_SS", _
\par \hich\af37\dbch\af31505\loch\f37             "MRAM_SS_OLD", "OSPI_SS_plan", "JPEG_SS_OLD")
\par \hich\af37\dbch\af31505\loch\f37         Set wsMain = ThisWorkbook.Sheets("TP_COVERAGE_CT_SDF")
\par \hich\af37\dbch\af31505\loch\f37     Else
\par \hich\af37\dbch\af31505\loch\f37         includedSheets =\hich\af37\dbch\af31505\loch\f37  GetSheetsEndingWith("_SS")
\par \hich\af37\dbch\af31505\loch\f37         Set wsMain = ThisWorkbook.Sheets("TP_COVERAGE_SHMEM_SDF")
\par \hich\af37\dbch\af31505\loch\f37     End If
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Find first visible row
\par \hich\af37\dbch\af31505\loch\f37     statsStartRow = wsMain.UsedRange.row
\par \hich\af37\dbch\af31505\loch\f37     While wsMain.Rows(statsStartRow).Hidden
\par \hich\af37\dbch\af31505\loch\f37         statsStartRow = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37     Wend
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Format main worksheet - only visible rows
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         lastRow = .Cells(.Rows.Count, "C").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         While lastRow > statsStartRow A\hich\af37\dbch\af31505\loch\f37 nd .Rows(lastRow).Hidden
\par \hich\af37\dbch\af31505\loch\f37             lastRow = lastRow - 1
\par \hich\af37\dbch\af31505\loch\f37         Wend
\par 
\par \hich\af37\dbch\af31505\loch\f37         lastCol = .Cells(statsStartRow, .Columns.Count).End(xlToLeft).Column
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 .Rang\hich\af37\dbch\af31505\loch\f37 e(.Cells(i, 1), .Cells(i, lastCol)).WrapText = False
\par \hich\af37\dbch\af31505\loch\f37                 visibleRowCount = visibleRowCount + 1
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37     End With
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Process duplicate Test IDs - only visible rows
\par \hich\af37\dbch\af31505\loch\f37     Set colMDict = CreateObject("Scripting.Dicti\hich\af37\dbch\af31505\loch\f37 onary")
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         lastRowM = .Cells(.Rows.Count, IIf(sheetType = "1", "M", "L")).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRowM
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 testIDM = Trim(.Cells(i, IIf(sheetType = "1", "M", "L")).Value)
\par \hich\af37\dbch\af31505\loch\f37                 If testIDM <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                     If colMDict.exists(testIDM) Then
\par \hich\af37\dbch\af31505\loch\f37                         colMDict(testIDM) = colMDict(testIDM) + 1
\par \hich\af37\dbch\af31505\loch\f37                    \hich\af37\dbch\af31505\loch\f37  Else
\par \hich\af37\dbch\af31505\loch\f37                         colMDict.Add testIDM, 1
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par 
\par \hich\af37\dbch\af31505\loch\f37         OutputRowY = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37         For Each key In colMDict.keys
\par \hich\af37\dbch\af31505\loch\f37             If colMDict(key) > 1 Then
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37               .Cells(OutputRowY, IIf(sheetType = "1", 29, 28)).Value = key
\par \hich\af37\dbch\af31505\loch\f37                 OutputRowY = OutputRowY + 1
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next key
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37     ' Define CSV file paths
\par \hich\af37\dbch\af31505\loch\f37     If sheetType = "1" Then
\par \hich\af37\dbch\af31505\loch\f37         CSV_FILE_PATHS = Array( _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\
Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_CT_TYP_MAX.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\
sites\\dv_team\\Shared%\hich\af37\dbch\af31505\loch\f37 20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_CT_TYP_MAX.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 
\f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ", _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\
Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_CT_TYP_MIN.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\
sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHE\hich\af37\dbch\af31505\loch\f37 ETS\\Regression_CT_TYP_MIN.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 
\f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ", _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\
Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_CT_TYP_MAX.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\
sites\\dv_team\\Shared%\hich\af37\dbch\af31505\loch\f37 20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_CT_TYP_MAX.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 
\f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ", _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\
Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_CT_TYP_MIN.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 http
\hich\af37\dbch\af31505\loch\f37 s://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_CT_TYP_MIN.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 
\af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ")
\par \hich\af37\dbch\af31505\loch\f37     Else
\par \hich\af37\dbch\af31505\loch\f37         CSV_FILE_PATHS = Array( _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%
\hich\af31506\dbch\af31505\loch\f31506 20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_SHMEM_TYP_MAX.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_SHMEM_TYP_MAX.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 
\af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ", _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "h\hich\af31506\dbch\af31505\loch\f31506 ttps://alifsemi.sharepoint.com\\\\sites
\\\\dv_team\\\\Shared%20Documents\\\\Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_SHMEM_TYP_MIN.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regres\hich\af37\dbch\af31505\loch\f37 sion_SHMEM_TYP_MIN.csv}}}\sectd \ltrsect
\linex0\sectdefaultcl\sectrsid12845185\sftnbj {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ", _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\
Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_SHMEM_TYP_MAX_MAX.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 
https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%\hich\af37\dbch\af31505\loch\f37 20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_SHMEM_TYP_MAX_MAX.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {
\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ", _
\par \hich\af37\dbch\af31505\loch\f37             "}{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7563470 \hich\af31506\dbch\af31505\loch\f31506  HYPERLINK "https://alifsemi.sharepoint.com\\\\sites\\\\dv_team\\\\Shared%20Documents\\\\
Docs\\\\Eagle_A0\\\\TestPlan\\\\REGRESSION_SHEETS\\\\Regression_SHMEM_TYP_MIN_\hich\af31506\dbch\af31505\loch\f31506 MIN.csv" }}{\fldrslt {\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 
\hich\af37\dbch\af31505\loch\f37 https://alifsemi.sharepoint.com\\sites\\dv_team\\Shared%20Documents\\Docs\\Eagle_A0\\TestPlan\\REGRESSION_SHEETS\\Regression_SHMEM_TYP_MIN_MIN.csv}}}\sectd \ltrsect\linex0\sectdefaultcl\sectrsid12845185\sftnbj {
\rtlch\fcs1 \af37\afs16 \ltrch\fcs0 \f37\fs16\lang9\langfe1033\kerning0\langnp9\insrsid12845185 \hich\af37\dbch\af31505\loch\f37 ")
\par \hich\af37\dbch\af31505\loch\f37     End If
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Process regression files
\par \hich\af37\dbch\af31505\loch\f37    For fileIndex = LBound(CSV_FILE_PATHS) To UBound(CSV_FILE_P\hich\af37\dbch\af31505\loch\f37 ATHS)
\par \hich\af37\dbch\af31505\loch\f37     On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37     Set wbRegression = Workbooks.Open(CSV_FILE_PATHS(fileIndex))
\par \hich\af37\dbch\af31505\loch\f37     On Error GoTo 0
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     If wbRegression Is Nothing Then
\par \hich\af37\dbch\af31505\loch\f37         MsgBox "Regression CSV file not found at: " & CSV_FILE_PATHS(fileIndex), vbCritical
\par \hich\af37\dbch\af31505\loch\f37        \hich\af37\dbch\af31505\loch\f37  GoTo NextFile
\par \hich\af37\dbch\af31505\loch\f37     End If
\par \hich\af37\dbch\af31505\loch\f37         With wbRegression.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37             If Not IsEmpty(.Cells(2, 7)) Then
\par \hich\af37\dbch\af31505\loch\f37                 .Cells(2, 7).Copy
\par \hich\af37\dbch\af31505\loch\f37                 wsMain.Cells(fileIndex + statsStartRow + 1, 2).PasteSpecial xlPasteValues
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         wbRegression.Close False
\par \hich\af37\dbch\af31505\loch\f37 NextFile:
\par \hich\af37\dbch\af31505\loch\f37     Next fileIndex
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Process main regression file
\par \hich\af37\dbch\af31505\loch\f37    CSV_FILE_PATH = CSV_FILE_PATHS(0)
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37 On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37 Set wbRegression = \hich\af37\dbch\af31505\loch\f37 Workbooks.Open(CSV_FILE_PATH)
\par \hich\af37\dbch\af31505\loch\f37 On Error GoTo 0
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37 If wbRegression Is Nothing Then
\par \hich\af37\dbch\af31505\loch\f37     MsgBox "Main regression CSV file not found at: " & CSV_FILE_PATH, vbCritical
\par \hich\af37\dbch\af31505\loch\f37     GoTo CleanupAndExit
\par \hich\af37\dbch\af31505\loch\f37 End If
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Process Test ID not found checks - only for visible rows
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         tpTestsNotInRegression = 0
\par \hich\af37\dbch\af31505\loch\f37         Dim checkColumn As Long
\par \hich\af37\dbch\af31505\loch\f37         Dim notFoundColumn As Long
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Set columns based on sheet type
\par \hich\af37\dbch\af31505\loch\f37         checkColumn = IIf(sheetType = "1", 3, 3)  ' Column C
\par \hich\af37\dbch\af31505\loch\f37         notFoundColumn = I\hich\af37\dbch\af31505\loch\f37 If(sheetType = "1", 14, 13)  ' Column N or M
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Process each visible row
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 ' Check if test ID is empty or missing
\par \hich\af37\dbch\af31505\loch\f37                 If Trim(.Cells(i, checkColumn).Value) = "" Then
\par \hich\af37\dbch\af31505\loch\f37                     .Cells(i, notFoundColumn).Value = "Test ID not found"
\par \hich\af37\dbch\af31505\loch\f37                     tpTestsNotInRegression = tpTestsNotInRegres\hich\af37\dbch\af31505\loch\f37 sion + 1
\par \hich\af37\dbch\af31505\loch\f37                 Else
\par \hich\af37\dbch\af31505\loch\f37                     ' Check if test ID exists in regression
\par \hich\af37\dbch\af31505\loch\f37                     Dim foundInRegression As Boolean
\par \hich\af37\dbch\af31505\loch\f37                     foundInRegression = False
\par \hich\af37\dbch\af31505\loch\f37                     
\par \hich\af37\dbch\af31505\loch\f37                     ' Get the test ID from the\hich\af37\dbch\af31505\loch\f37  appropriate column
\par \hich\af37\dbch\af31505\loch\f37                     testID = Trim(.Cells(i, IIf(sheetType = "1", "M", "L")).Value)
\par \hich\af37\dbch\af31505\loch\f37                     
\par \hich\af37\dbch\af31505\loch\f37                     If testID <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                         With wbRegression.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37                             Dim regLastRow As Long
\par \hich\af37\dbch\af31505\loch\f37                             regLastRow = .Cells(.Rows.Count, "E").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37                             
\par \hich\af37\dbch\af31505\loch\f37                             ' Search in regression sheet
\par \hich\af37\dbch\af31505\loch\f37                             For j = 2 T\hich\af37\dbch\af31505\loch\f37 o regLastRow
\par \hich\af37\dbch\af31505\loch\f37                                 If Trim(.Cells(j, "E").Value) = testID Then
\par \hich\af37\dbch\af31505\loch\f37                                     foundInRegression = True
\par \hich\af37\dbch\af31505\loch\f37                                     Exit For
\par \hich\af37\dbch\af31505\loch\f37                                 End If
\par \hich\af37\dbch\af31505\loch\f37                       \hich\af37\dbch\af31505\loch\f37       Next j
\par \hich\af37\dbch\af31505\loch\f37                         End With
\par \hich\af37\dbch\af31505\loch\f37                         
\par \hich\af37\dbch\af31505\loch\f37                         If Not foundInRegression Then
\par \hich\af37\dbch\af31505\loch\f37                             wsMain.Cells(i, notFoundColumn).Value = "Test ID not found"
\par \hich\af37\dbch\af31505\loch\f37                             tpTestsNotInRegression = tpTestsNotInRegression + 1
\par \hich\af37\dbch\af31505\loch\f37                         End If
\par \hich\af37\dbch\af31505\loch\f37                     Else
\par \hich\af37\dbch\af31505\loch\f37                         ' If tes\hich\af37\dbch\af31505\loch\f37 t ID column is empty
\par \hich\af37\dbch\af31505\loch\f37                         .Cells(i, notFoundColumn).Value = "Test ID not found"
\par \hich\af37\dbch\af31505\loch\f37                         tpTestsNotInRegression = tpTestsNotInRegression + 1
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next\hich\af37\dbch\af31505\loch\f37  i
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Update the Test ID not found count in statistics
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 10, 1).Value = tpTestsNotInRegression
\par \hich\af37\dbch\af31505\loch\f37     End With
\par 
\par \hich\af37\dbch\af31505\loch\f37  ' Process regression data and duplicates
\par \hich\af37\dbch\af31505\loch\f37     Set testIDDict = CreateObject("Scripting.Dictionary")
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37   With wbRegression.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37         lastRowCSV = .Cells(.Rows.Count, "E").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         For i = 2 To lastRowCSV
\par \hich\af37\dbch\af31505\loch\f37             testID = Trim(.Cells(i, "E").Value)
\par \hich\af37\dbch\af31505\loch\f37             If testID <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                 If testIDDict.exists(testID) Then
\par \hich\af37\dbch\af31505\loch\f37    \hich\af37\dbch\af31505\loch\f37                  testIDDict(testID) = testIDDict(testID) + 1
\par \hich\af37\dbch\af31505\loch\f37                 Else
\par \hich\af37\dbch\af31505\loch\f37                     testIDDict.Add testID, 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Output duplicate regression tests
\par \hich\af37\dbch\af31505\loch\f37         OutputRow = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37         For Each key In testIDDict.keys
\par \hich\af37\dbch\af31505\loch\f37             If testIDDict(key) > 1 Then
\par \hich\af37\dbch\af31505\loch\f37                 wsMain.Cells(OutputRow, IIf(sheetType = "1", 25, 24)).Value = key
\par \hich\af37\dbch\af31505\loch\f37             \hich\af37\dbch\af31505\loch\f37     OutputRow = OutputRow + 1
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next key
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Process missing tests between TestPlan and Regression
\par \hich\af37\dbch\af31505\loch\f37         LastRowTestPlan = wsMain.Cells(wsMain.Rows.Count, IIf(sheetType = "1", "D", "C")).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         LastRowRegres\hich\af37\dbch\af31505\loch\f37 sion = .Cells(.Rows.Count, "E").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Get visible TestPlan IDs
\par \hich\af37\dbch\af31505\loch\f37         Dim visibleTestPlanIDs As Collection
\par \hich\af37\dbch\af31505\loch\f37         Set visibleTestPlanIDs = New Collection
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To LastRowTestPlan
\par \hich\af37\dbch\af31505\loch\f37             If Not w\hich\af37\dbch\af31505\loch\f37 sMain.Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 testID = Trim(wsMain.Cells(i, IIf(sheetType = "1", "M", "L")).Value)
\par \hich\af37\dbch\af31505\loch\f37                 If testID <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                     On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37                     visibleTestPlanIDs.Add testID, testID
\par \hich\af37\dbch\af31505\loch\f37                     On Error GoTo 0
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Check regression tests against visible TestPlan IDs
\par \hich\af37\dbch\af31505\loch\f37         OutputRow = statsStartRow + 1
\par \hich\af37\dbch\af31505\loch\f37     \hich\af37\dbch\af31505\loch\f37     For i = 2 To LastRowRegression
\par \hich\af37\dbch\af31505\loch\f37             testID = Trim(.Cells(i, "E").Value)
\par \hich\af37\dbch\af31505\loch\f37             If testID <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                 On Error Resume Next
\par \hich\af37\dbch\af31505\loch\f37                 visibleTestPlanIDs.Item testID
\par \hich\af37\dbch\af31505\loch\f37                 If Err.Number <> 0 Then
\par \hich\af37\dbch\af31505\loch\f37                 \hich\af37\dbch\af31505\loch\f37     ' Test not found in TestPlan
\par \hich\af37\dbch\af31505\loch\f37                     wsMain.Cells(OutputRow, IIf(sheetType = "1", 20, 19)).Value = testID
\par \hich\af37\dbch\af31505\loch\f37                     OutputRow = OutputRow + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37                 On Error GoTo 0
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37     End With
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Update serial numbers for visible rows
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         lastRowT = .Cells(.Rows.Count, IIf(sheetType = "1", "T", "S")).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         Dim serialNumber As Long
\par \hich\af37\dbch\af31505\loch\f37         serialNumber = 1
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRowT
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 If Not IsEmpty(.Cells(i, IIf(sheetType = "1", "T", "S")).Value) Then
\par \hich\af37\dbch\af31505\loch\f37                     .Cells(i, IIf(sheetType = "1", "S", "R")).Value = serialNumber
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37                   serialNumber = serialNumber + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37     End With
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Set up dictionary for matching between sheets
\par \hich\af37\dbch\af31505\loch\f37     Set dict = CreateObject("Scripting.Dictionary")
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         lastRow\hich\af37\dbch\af31505\loch\f37  = .Cells(.Rows.Count, IIf(sheetType = "1", "M", "L")).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRow
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 keyValue = Trim(.Cells(i, IIf(sheetType = "1", "M", "L")).Value)
\par \hich\af37\dbch\af31505\loch\f37                 If ke\hich\af37\dbch\af31505\loch\f37 yValue <> "" Then
\par \hich\af37\dbch\af31505\loch\f37                     If Not dict.exists(keyValue) Then
\par \hich\af37\dbch\af31505\loch\f37                         dict.Add keyValue, i
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Match and update values
\par \hich\af37\dbch\af31505\loch\f37         lastRowX = .Cells(.Rows.Count, IIf(sheetType = "1", "Y", "X")).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastRowX
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 compareValue = Trim(.Cells(i, IIf(s\hich\af37\dbch\af31505\loch\f37 heetType = "1", "Y", "X")).Value)
\par \hich\af37\dbch\af31505\loch\f37                 If compareValue <> "" And dict.exists(compareValue) Then
\par \hich\af37\dbch\af31505\loch\f37                     matchRow = dict(compareValue)
\par \hich\af37\dbch\af31505\loch\f37                     .Cells(i, IIf(sheetType = "1", "Z", "Y")).Value = _
\par \hich\af37\dbch\af31505\loch\f37                         .Ce\hich\af37\dbch\af31505\loch\f37 lls(matchRow, IIf(sheetType = "1", "O", "N")).Value
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37     End With
\par 
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         Dim lastDuplicateRow As Long
\par \hich\af37\dbch\af31505\loch\f37         Dim visibleDuplicateCount As Long
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Get last row in duplicate column
\par \hich\af37\dbch\af31505\loch\f37         lastDuplicateRow = .Cells(.Rows.Count, IIf(sheetType = "1", 25, 24)).End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Count only visible rows
\par \hich\af37\dbch\af31505\loch\f37         visibleDuplicateCount = 0
\par \hich\af37\dbch\af31505\loch\f37         For i = statsStartRow + 1 To lastDupl\hich\af37\dbch\af31505\loch\f37 icateRow
\par \hich\af37\dbch\af31505\loch\f37             If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                 If Not IsEmpty(.Cells(i, IIf(sheetType = "1", 25, 24)).Value) Then
\par \hich\af37\dbch\af31505\loch\f37                     visibleDuplicateCount = visibleDuplicateCount + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Next i
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Update duplicate count
\par \hich\af37\dbch\af31505\loch\f37         duplicateTests = visibleDuplicateCount
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Update statistics
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 14, 1).Value = duplicateTests
\par \hich\af37\dbch\af31505\loch\f37     End With
\par 
\par \hich\af37\dbch\af31505\loch\f37       ' Update relate\hich\af37\dbch\af31505\loch\f37 d sheets
\par \hich\af37\dbch\af31505\loch\f37     For Each ws In ThisWorkbook.Worksheets
\par \hich\af37\dbch\af31505\loch\f37         If sheetType = "1" Then
\par \hich\af37\dbch\af31505\loch\f37             ' Process CT_SDF sheets
\par \hich\af37\dbch\af31505\loch\f37             sheetExcluded = False
\par \hich\af37\dbch\af31505\loch\f37             For i = LBound(excludedSheets) To UBound(excludedSheets)
\par \hich\af37\dbch\af31505\loch\f37                 If ws.Name = excl\hich\af37\dbch\af31505\loch\f37 udedSheets(i) Then
\par \hich\af37\dbch\af31505\loch\f37                     sheetExcluded = True
\par \hich\af37\dbch\af31505\loch\f37                     Exit For
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next i
\par 
\par \hich\af37\dbch\af31505\loch\f37             If Not sheetExcluded And ws.Name <> wsMain.Name Then
\par \hich\af37\dbch\af31505\loch\f37                 compareLastRow = ws.Cells(ws.Rows.Count, "D\hich\af37\dbch\af31505\loch\f37 ").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37                 For i = statsStartRow + 1 To compareLastRow
\par \hich\af37\dbch\af31505\loch\f37                     If Not ws.Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                         testID = Trim(ws.Cells(i, "D").Value)
\par \hich\af37\dbch\af31505\loch\f37                         If testID <> "" And dict.exists(testID) Then
\par \hich\af37\dbch\af31505\loch\f37                             matchRow = dict(testID)
\par \hich\af37\dbch\af31505\loch\f37                             If makeChangestyp_max Then ws.Cells(i, "K").Value = ws.Cells(i, "J").Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.C\hich\af37\dbch\af31505\loch\f37 ells(i, "J").Value = wsMain.Cells(matchRow, "C").Value
\par \hich\af37\dbch\af31505\loch\f37                             If makeChangestyp_min Then ws.Cells(i, "M").Value = ws.Cells(i, "L").Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.Cells(i, "L").Value = wsMain.Cells(matchRow, "E").Value
\par \hich\af37\dbch\af31505\loch\f37            \hich\af37\dbch\af31505\loch\f37                  If makeChangesmaxmax Then ws.Cells(i, "O").Value = ws.Cells(i, "N").Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.Cells(i, "N").Value = wsMain.Cells(matchRow, "G").Value
\par \hich\af37\dbch\af31505\loch\f37                             If makeChangesminmin Then ws.Cells(i, "Q").Value = ws.Cells(i, "P").Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.Cells(i, "P").Value = wsMain.Cells(matchRow, "I").Value
\par \hich\af37\dbch\af31505\loch\f37                         End If
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37          \hich\af37\dbch\af31505\loch\f37        Next i
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             ' Process SHMEM_SDF sheets
\par \hich\af37\dbch\af31505\loch\f37             sheetIncluded = False
\par \hich\af37\dbch\af31505\loch\f37             For i = LBound(includedSheets) To UBound(includedSheets)
\par \hich\af37\dbch\af31505\loch\f37                 If ws.Name = includedSheets(i) Then
\par \hich\af37\dbch\af31505\loch\f37                 \hich\af37\dbch\af31505\loch\f37     sheetIncluded = True
\par \hich\af37\dbch\af31505\loch\f37                     Exit For
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next i
\par 
\par \hich\af37\dbch\af31505\loch\f37             If sheetIncluded Then
\par \hich\af37\dbch\af31505\loch\f37                 compareLastRow = ws.Cells(ws.Rows.Count, "C").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37                 For i = statsStartRow + 1 To compareLastRow
\par \hich\af37\dbch\af31505\loch\f37                     If Not ws.Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                         testID = Trim(ws.Cells(i, "C").Value)
\par \hich\af37\dbch\af31505\loch\f37                         If testID <> "" And dict.exists(testID) Then
\par \hich\af37\dbch\af31505\loch\f37                \hich\af37\dbch\af31505\loch\f37              matchRow = dict(testID)
\par \hich\af37\dbch\af31505\loch\f37                             If makeChangestyp_max Then ws.Cells(i, "J").Value = ws.Cells(i, "I").Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.Cells(i, "I").Value = wsMain.Cells(matchRow, "C").Value
\par \hich\af37\dbch\af31505\loch\f37                             I\hich\af37\dbch\af31505\loch\f37 f makeChangestyp_min Then ws.Cells(i, "L").Value = ws.Cells(i, "K").Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.Cells(i, "K").Value = wsMain.Cells(matchRow, "E").Value
\par \hich\af37\dbch\af31505\loch\f37                             If makeChangesmaxmax Then ws.Cells(i, "N").Value = ws.Cells(i, "M")\hich\af37\dbch\af31505\loch\f37 .Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.Cells(i, "M").Value = wsMain.Cells(matchRow, "G").Value
\par \hich\af37\dbch\af31505\loch\f37                             If makeChangesminmin Then ws.Cells(i, "P").Value = ws.Cells(i, "O").Value
\par \hich\af37\dbch\af31505\loch\f37                             ws.Cells(i, "O").Value = wsMain.\hich\af37\dbch\af31505\loch\f37 Cells(matchRow, "I").Value
\par \hich\af37\dbch\af31505\loch\f37                         End If
\par \hich\af37\dbch\af31505\loch\f37                     End If
\par \hich\af37\dbch\af31505\loch\f37                 Next i
\par \hich\af37\dbch\af31505\loch\f37             End If
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next ws
\par \hich\af37\dbch\af31505\loch\f37     
\par 
\par \hich\af37\dbch\af31505\loch\f37     ' Calculate metrics and update worksheet
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         ' Add headers at first visi\hich\af37\dbch\af31505\loch\f37 ble row
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, 1).Value = "SDF " & IIf(sheetType = "1", "CT", "SHMEM") & _
\par \hich\af37\dbch\af31505\loch\f37             " Coverage)"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, 2).Value = "Regression Sheets"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 14, 13)).Value = "TP tests missing from regression"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 16, 15)).Value = "Comment"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 17, 16)).Value = "Status\hich\af37\dbch\af31505\loch\f37 "
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 19, 18)).Value = "Sr.No"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 20, 19)).Value = "Regression tests missing in TP"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 21, 20)).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37        .Cells(statsStartRow, IIf(sheetType = "1", 22, 21)).Value = "Comment"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 23, 22)).Value = "Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 25, 24)).Value = "Duplicate Test ID's in regression\hich\af37\dbch\af31505\loch\f37 "
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 26, 25)).Value = "Owner"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 27, 26)).Value = "Comment"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow, IIf(sheetType = "1", 28, 27)).Value = "Status"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsSta\hich\af37\dbch\af31505\loch\f37 rtRow, IIf(sheetType = "1", 29, 28)).Value = "Duplicate Test ID's in TestPlan"
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Update statistics
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 1, 1).Value = "Testplan Total Tests"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 2, 1).Value = visibleRowCount
\par \hich\af37\dbch\af31505\loch\f37         .Cells(stat\hich\af37\dbch\af31505\loch\f37 sStartRow + 3, 1).Value = "Regression Total Tests"
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Calculate regression total from visible rows
\par \hich\af37\dbch\af31505\loch\f37         regressionTotal = 0
\par \hich\af37\dbch\af31505\loch\f37         With wbRegression.Sheets(1)
\par \hich\af37\dbch\af31505\loch\f37             lastRowCSV = .Cells(.Rows.Count, "E").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37             F\hich\af37\dbch\af31505\loch\f37 or i = 2 To lastRowCSV
\par \hich\af37\dbch\af31505\loch\f37                 If Not .Rows(i).Hidden Then
\par \hich\af37\dbch\af31505\loch\f37                     regressionTotal = regressionTotal + 1
\par \hich\af37\dbch\af31505\loch\f37                 End If
\par \hich\af37\dbch\af31505\loch\f37             Next i
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 4, 1).Value = regressionTotal
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Calculate coverage percentages
\par \hich\af37\dbch\af31505\loch\f37         missingInTP = .Cells(.Rows.Count, IIf(sheetType = "1", 20, 19)).End(xlUp).row - statsStartRow
\par \hich\af37\dbch\af31505\loch\f37         If missingInTP > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             .Cells(\hich\af37\dbch\af31505\loch\f37 statsStartRow + 12, 1).Value = missingInTP
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             .Cells(statsStartRow + 12, 1).Value = 0
\par \hich\af37\dbch\af31505\loch\f37         End If
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Update test coverage statistics
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 5, 1).Value = "Testplan vs. Regression coverage"
\par \hich\af37\dbch\af31505\loch\f37         If\hich\af37\dbch\af31505\loch\f37  visibleRowCount > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             coverage = ((visibleRowCount - tpTestsNotInRegression) / visibleRowCount) * 100
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             coverage = 0
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 6, 1).Value = Format(coverage, "0.00") & "%"
\par 
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 7, 1).Value = "Regression vs. Testplan coverage"
\par \hich\af37\dbch\af31505\loch\f37         If regressionTotal > 0 Then
\par \hich\af37\dbch\af31505\loch\f37             coverage = ((regressionTotal - missingInTP) / regre\hich\af37\dbch\af31505\loch\f37 ssionTotal) * 100
\par \hich\af37\dbch\af31505\loch\f37         Else
\par \hich\af37\dbch\af31505\loch\f37             coverage = 0
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 8, 1).Value = Format(coverage, "0.00") & "%"
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Update missing tests information
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 9, 1).Value = "TP tests not in regression:"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 10, 1).Value = tpTestsNotInRegression
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 11, 1).Value = "Regression tests not in TP"
\par \hich\af37\dbch\af31505\loch\f37         .Cells(statsStartRow + 13, 1)\hich\af37\dbch\af31505\loch\f37 .Value = "Duplicate tests in regression"
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         
\par 
\par \hich\af37\dbch\af31505\loch\f37         ' Format header row
\par \hich\af37\dbch\af31505\loch\f37         With .Range(.Cells(statsStartRow, 1), .Cells(statsStartRow, IIf(sheetType = "1", 31, 30)))
\par \hich\af37\dbch\af31505\loch\f37             .HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37             .VerticalAlig\hich\af37\dbch\af31505\loch\f37 nment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37             .WrapText = True
\par \hich\af37\dbch\af31505\loch\f37             .Font.Bold = True
\par \hich\af37\dbch\af31505\loch\f37             .Interior.Color = RGB(200, 200, 200)
\par \hich\af37\dbch\af31505\loch\f37         End With
\par \hich\af37\dbch\af31505\loch\f37         
\par \hich\af37\dbch\af31505\loch\f37         ' Add borders to visible range
\par \hich\af37\dbch\af31505\loch\f37         lastRowA = .Cells(.Rows.Count, "C").End(xlUp).row
\par \hich\af37\dbch\af31505\loch\f37         \hich\af37\dbch\af31505\loch\f37 .Range(.Cells(statsStartRow, 1), .Cells(lastRowA, IIf(sheetType = "1", "AE", "AD"))).Borders.LineStyle = xlContinuous
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37          ' Format worksheet
\par \hich\af37\dbch\af31505\loch\f37          
\par \hich\af37\dbch\af31505\loch\f37        If sheetType = "1" Then
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         ' Format worksheet with +1 width
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").ColumnWidth = 17
\par \hich\af37\dbch\af31505\loch\f37         .Columns("B").ColumnWidth = 22
\par \hich\af37\dbch\af31505\loch\f37         .Columns("C:J").ColumnWidth = 10
\par \hich\af37\dbch\af31505\loch\f37         .Columns("K:L").ColumnWidth = 23
\par \hich\af37\dbch\af31505\loch\f37         .Columns("M").ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns\hich\af37\dbch\af31505\loch\f37 ("N").ColumnWidth = 18
\par \hich\af37\dbch\af31505\loch\f37         .Columns("O").ColumnWidth = 10
\par \hich\af37\dbch\af31505\loch\f37         .Columns("P").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("Q").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("R").ColumnWidth = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns("S").ColumnWidth = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns("T").ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns("U").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("V").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("W").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("X").ColumnWidth = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns("Y").ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns("Z").C\hich\af37\dbch\af31505\loch\f37 olumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AA").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AB").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AC").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AD").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AE").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AF").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").VerticalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns("K:L").WrapText = False
\par \hich\af37\dbch\af31505\loch\f37         .Columns("M").WrapText = True
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").WrapText = True
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37 ElseIf sheetType = "2" Then
\par \hich\af37\dbch\af31505\loch\f37     With wsMain
\par \hich\af37\dbch\af31505\loch\f37         ' Original formatting
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").ColumnWidth = 17
\par \hich\af37\dbch\af31505\loch\f37         .Columns("B").ColumnWidth = 22
\par \hich\af37\dbch\af31505\loch\f37         .Columns("C:J").ColumnWidth = 10
\par \hich\af37\dbch\af31505\loch\f37         .Col\hich\af37\dbch\af31505\loch\f37 umns("K").ColumnWidth = 23
\par \hich\af37\dbch\af31505\loch\f37         .Columns("L").ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns("M").ColumnWidth = 18
\par \hich\af37\dbch\af31505\loch\f37         .Columns("N").ColumnWidth = 10
\par \hich\af37\dbch\af31505\loch\f37         .Columns("O").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("P").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("Q").ColumnWidth \hich\af37\dbch\af31505\loch\f37 = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns("R").ColumnWidth = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns("S").ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns("T").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("U").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("V").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("W").ColumnWidth = 5
\par \hich\af37\dbch\af31505\loch\f37         .Columns("X"\hich\af37\dbch\af31505\loch\f37 ).ColumnWidth = 28
\par \hich\af37\dbch\af31505\loch\f37         .Columns("Y").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("Z").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AA").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AB").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AC").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AD").ColumnWidth = 33
\par \hich\af37\dbch\af31505\loch\f37         .Columns("AE").ColumnWidth = 11
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").HorizontalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").VerticalAlignment = xlCenter
\par \hich\af37\dbch\af31505\loch\f37         .Columns("K").WrapText = False
\par \hich\af37\dbch\af31505\loch\f37         .Columns("A").WrapText = \hich\af37\dbch\af31505\loch\f37 True
\par \hich\af37\dbch\af31505\loch\f37         .Columns("L").WrapText = True
\par \hich\af37\dbch\af31505\loch\f37     End With
\par \hich\af37\dbch\af31505\loch\f37 End If
\par \hich\af37\dbch\af31505\loch\f37 CleanupAndExit:
\par \hich\af37\dbch\af31505\loch\f37     Application.ScreenUpdating = True
\par \hich\af37\dbch\af31505\loch\f37     Application.Calculation = xlCalculationAutomatic
\par \hich\af37\dbch\af31505\loch\f37     MsgBox "Coverage analysis and update completed successfully!", vbInformation
\par \hich\af37\dbch\af31505\loch\f37     E\hich\af37\dbch\af31505\loch\f37 xit Sub
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37 ErrorHandler:
\par \hich\af37\dbch\af31505\loch\f37     Application.ScreenUpdating = True
\par \hich\af37\dbch\af31505\loch\f37     Application.Calculation = xlCalculationAutomatic
\par \hich\af37\dbch\af31505\loch\f37     If Not wbRegression Is Nothing Then wbRegression.Close False
\par \hich\af37\dbch\af31505\loch\f37     MsgBox "An error occurred: " & Err.Description, vbCritical
\par \hich\af37\dbch\af31505\loch\f37 End Sub
\par \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37 Pub\hich\af37\dbch\af31505\loch\f37 lic Function GetSheetsEndingWith(suffix As String) As Variant
\par \hich\af37\dbch\af31505\loch\f37     Dim ws As Worksheet
\par \hich\af37\dbch\af31505\loch\f37     Dim matchingSheets As Collection
\par \hich\af37\dbch\af31505\loch\f37     Set matchingSheets = New Collection
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     For Each ws In ThisWorkbook.Worksheets
\par \hich\af37\dbch\af31505\loch\f37         If Right(ws.Name, Len(suffix)) = suffix Then
\par \hich\af37\dbch\af31505\loch\f37             matchingSheets.Add ws.Name
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next ws
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     Dim result() As String
\par \hich\af37\dbch\af31505\loch\f37     Dim i As Long
\par \hich\af37\dbch\af31505\loch\f37     ReDim result(1 To matchingSheets.Count)
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     For i = 1 To matchingSheets.Count
\par \hich\af37\dbch\af31505\loch\f37         result(i) = matchingSheets(i)
\par \hich\af37\dbch\af31505\loch\f37     Next i
\par \hich\af37\dbch\af31505\loch\f37     
\par \hich\af37\dbch\af31505\loch\f37     GetSheetsEndingWith = result
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par \hich\af37\dbch\af31505\loch\f37 Private Function IsSheetIncluded(sheetName As String, includedSheets As Variant) As Boolean
\par \hich\af37\dbch\af31505\loch\f37    Dim k As Long
\par \hich\af37\dbch\af31505\loch\f37     For k = LBound(includedSheets) To UBound(includedSheets)
\par \hich\af37\dbch\af31505\loch\f37         If sheetName = includedSheets(k) Then
\par \hich\af37\dbch\af31505\loch\f37             IsSheetIncluded = True
\par \hich\af37\dbch\af31505\loch\f37             Exit Function
\par \hich\af37\dbch\af31505\loch\f37         End If
\par \hich\af37\dbch\af31505\loch\f37     Next k
\par \hich\af37\dbch\af31505\loch\f37     IsSheetIncluded = False
\par \hich\af37\dbch\af31505\loch\f37 End Function
\par 
\par 
\par }\pard \ltrpar\ql \li0\ri0\sa160\sl278\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10448442 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b0304140006000800000021006780fcb48e070000cd200000160000007468656d652f7468656d652f
7468656d65312e786d6cec594b8f1bb911be07c87f68f45d56b71e2d696079a1a767ed19dbb064077be448949a1e76b341523316160602ef299700017617b904
c82d8720c80259208b5cf2630cd848363f224576ab454a94e70103318299b9a8d95f153f5615abaac9fb5fbc4ea87781b9202cedfae1bdc0f7703a6373922ebb
fe8be9b8d2f63d21513a4794a5b8ebafb1f0bf78f0cb5fdc474732c609f6403e1547a8ebc7526647d5aa98c13012f758865378b7603c41121ef9b23ae7e812f4
26b45a0b82a89a2092fa5e8a1250fb74b12033ec4d954affc146f988c2632a851a98513e51aab125a1b1f3f35021c45a0c28f72e10edfa30cf9c5d4ef16be97b
1409092fba7ea0fffcea83fb55745408517940d6901bebbf42ae10989fd7f49c7c79564e1a8c6aed4658ead7002af771a3b6fa2ff569009acd60a539175367d8
8c8276adc01aa0fca74377a715d66dbca1bfbec739ec44fd5ac3d2af41b9fec61e3e187746c3a685d7a01cdfdcc3f7825abf53b7f01a94e3a33d7c63d46bd546
165e83624ad2f37d74d46ab7a3025d42168c1e3be19d280a5ac302be45413494d1a5a658b0541e8ab504bd627c0c0005a44892d493eb0c2fd00ca2b8974926bc
211119456bdfcb50ca040c07b53084d06b04b5f25f5b1c1d6164482b5ec044ec0d293e9e987192c9aeff08b4fa06e4fd4f3fbd7bfbe3bbb77f7ff7cd37efdefe
d53b21cb58e6aa2cb963942e4db99ffff4bbfffce1d7debffff6c79fbffdce8d1726fec35f7ef3e11ffffc987ad86a5b53bcfffe870f3ffef0fef7bffdd79fbf
7568ef717466c2a724c1c27b822fbde72c81056a53d8fcf119bf99c43446c494e8a54b8152a46671e81fc9d8423f59238a1cb83eb6edf89243aa71011fae5e59
8427315f49e2d0f8384e2ce02963b4cfb8d30a8fd55c8699a7ab74e99e9caf4cdc73842e5c730f506a7979b4ca20c71297ca418c2d9acf284a255ae2144b4fbd
63e7183b56f71521965d4fc98c33c116d2fb8a787d449c269992332b9ab642c72401bfac5d04c1df966d4e5f7a7d465dab1ee20b1b097b035107f929a696191f
a29544894be51425d434f80992b18be464cd67266e2424787a8929f346732c844be62987f51a4e7f8c20bb39dd7e4ad7898de4929cbb749e20c64ce4909d0f62
94642eec84a4b189fd529c438822ef19932ef829b377887a063fa0f4a0bb5f126cb9fbea6cf002b29c49691b20eacd8a3b7cf910332b7e276bba40d8956a7a3c
b1526c8f136774f4574b2bb44f30a6e812cd31f65e7ce960d0679965f32de94731649563ec0aac47c88e55f59c6201bd926a6ef6f3e4091156c84ef0921de073
bade493c6b9426881fd2fc04bc6eda7c74c661333a283ca5b37313f884400f08f1e234ca53013a8ce03ea8f5598cac02a69e853b5ed7dcf2df75f618eccb5716
8d6bec4b90c1379681c46eca7cd4365344ad09b6013345c43b71a55b10b1dcbf1551c5558bad9c720b7bd36edd00dd91d5f42424bda203fadf743e8e40fc343d
8f5bb195b06ed8ed1c4a28c73b3dce21dc6e6733607c4e3effc6668856e9330cb5643f6bddf535777d8dff7fdfd71cdacf77ddcca19ee3ae9bf1a1cbb8eb668a
03964fd3cd6c1b18e86dd421437ed8a38f7e9283273f0b42e944ae293e11faf047c037cd7c0c834a4e9f7ae2f224308be1a72a733081855b72a4653ccee4af88
8c2731cae08428f49592a528542f8597310107477ad8a95be1e92a3965f3fcc0539f3005796515486ec783261c3de5e37058257374d42a06153f7daa0a7c35db
a53e6cdd1050b23721614c6693a83b48b4368357905067679f8645c7c1a2add46f5cb5670aa0567a053eba3df854effacd86220427e562060dfa5cf92977f5c6
bbda999fd2d3878c6945001c2ee62b81a3f9d2d31dc5f5e0f2d4eaf250bb86a72d12da297958d924b46574832762f8142ea2538d5e87c64d7dddd9bad4a2a74c
a1e783f8ded268b53fc6e2b6be06b9dddc40533353d0d4bbecfa51bd0921334359d75fc0c131fc4c32881da1bebb105dc2edcb4cf27cc3df26b3645cc8211271
6e709d7472f7244462ee5192747db5fcd20d34d53944730b6b90103e5b721d482b9f1b3970baed64bc58e09934dd6e8c284be78f90e1f35ce17cabc56f0f5692
6c05ee9ec4f34bef8caef8730421d66c85ca807322e0fe20ccad392770215626b26dfced14a622f99b37523a86f27144b3181515c54ce6395cd793928e7e2a6d
603c156b06831a26290ae1d9521558d3a856352d4b57cee160d5bd5a4859ce489adb9a6965155535dd59cc9a615306766c79bb226fb0da9818729a59e1f3d4bd
9b723b9b5cb7d3279455020c5edaef76a5dfa0b69dcca2a618efa76195b38b51bb766c167805b5eb140923eb471bb53b762b6b84733a18bc55e507b9dda885a1
c5a6afd496d637e7e6e5363b7b05c963085dee8a4aa15d09a7bb1c415736d13d499e36608bbc96c5d6805fde8a93aeff75d0ec3506b5e6a012b49ba34aa3de08
2aed66af5ee9359bf570d40c8361bff6060a8b8c93b099dfda8fe11283ae8bbb7b3dbe777f9f6cee69eecd585265fa7ebeaa89ebfbfbb076f8fede239074be8e
6ae34ebdd38f2a9d7a6f5c690cfbed4a6710f52bc368d01a8e878366bb337ee37b171adce8d5078d68d4ae44e16050694481a2dfee545a8d5aadd768f5daa346
ef4dd1c6c0caf3f451d802ccab793df82f000000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f7468656d
652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f2451eced
0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198720e27
4a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528a2c6cc
e0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c0200001300000000000000000000000000000000
005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b000000000000000000000000003001
00005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000190200007468656d65
2f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021006780fcb48e070000cd20000016000000000000000000000000
00d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b010000270000000000000000
0000000000980a00007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000930b00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax376\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;\lsdpriority39 \lsdlocked0 Table Grid;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdlocked0 Placeholder Text;
\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;
\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;
\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Mention;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hashtag;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Unresolved Mention;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Link;}}{\*\datastore 01050000
02000000180000004d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000c03e
422d8cafdb01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}